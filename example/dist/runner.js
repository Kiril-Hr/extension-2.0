/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/core/decorators/ExtensionConfig.ts":
/*!************************************************!*\
  !*** ./src/core/decorators/ExtensionConfig.ts ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ExtensionConfig: () => (/* binding */ ExtensionConfig),
/* harmony export */   matchModuleToUrl: () => (/* binding */ matchModuleToUrl)
/* harmony export */ });
function ExtensionConfig(config) {
  // Decorator helps select needed module which depends on current URL
  return function (target) {
    var currentUrl = getCurrentUrl();
    var neededModulesConfig = matchModuleToUrl(config, currentUrl);
    target.setConfig(neededModulesConfig);
  };
}
function matchModuleToUrl(config, currentUrl) {
  return {
    functionalities: config.functionalities.filter(function (Module) {
      var moduleUrl = Object.getOwnPropertyDescriptor(Module, 'url').value;
      return checkUrl(moduleUrl, currentUrl);
    })
  };
}
function checkUrl(url, currentUrl) {
  var kindModuleUrl = new URL(url);
  var _protocol$hostname$pa = {
      protocol: currentUrl.includes(kindModuleUrl.protocol),
      hostname: currentUrl.includes(replacer(kindModuleUrl.hostname)),
      path: kindModuleUrl.pathname.startsWith('/*') ? true : currentUrl.includes(replacer(kindModuleUrl.pathname))
    },
    protocol = _protocol$hostname$pa.protocol,
    path = _protocol$hostname$pa.path,
    hostname = _protocol$hostname$pa.hostname;
  return protocol && hostname && path;
}
function getCurrentUrl() {
  return window.location.href;
}
function replacer(pathname) {
  // This function returns url without star or dot (after converting url via url Object starts converting to %2A)
  return pathname.replace(/(\.(\*|%2A)|(\*|%2A)\.|(\*|%2A))/g, '');
}

/***/ }),

/***/ "./src/core/decorators/ModuleDecorator.ts":
/*!************************************************!*\
  !*** ./src/core/decorators/ModuleDecorator.ts ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ModuleDecorator: () => (/* binding */ ModuleDecorator)
/* harmony export */ });
/* harmony import */ var _providers_moduleProvider__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../providers/moduleProvider */ "./src/core/providers/moduleProvider.ts");
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }

function ModuleDecorator(params) {
  // This decorator helps create a derivative module of program.
  // Write here services you want to use but remember that you have only one point to run your module(script),
  // put into params object a method of launching your module in setupFunction properties.
  // The params object has third option which is called executors where you can put in the functions you want to execute after module logic will start working on the web page.
  return function (target) {
    var ModuleWithServices = /*#__PURE__*/function (_target) {
      _inherits(ModuleWithServices, _target);
      var _super = _createSuper(ModuleWithServices);
      function ModuleWithServices() {
        var _this;
        _classCallCheck(this, ModuleWithServices);
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        _this = _super.call.apply(_super, [this].concat(args));
        _defineProperty(_assertThisInitialized(_this), "services", void 0);
        _defineProperty(_assertThisInitialized(_this), "_params", void 0);
        var provider = new _providers_moduleProvider__WEBPACK_IMPORTED_MODULE_0__.ModuleProvider(params);
        _this._params = provider.params;
        _this.services = _this.initializeServices(_this._params.services);
        return _this;
      }
      _createClass(ModuleWithServices, [{
        key: "setup",
        value: function setup() {
          this._params.setupFunction();
          try {
            this.setupAdditionalMethods(this._params.executors);
          } catch (e) {
            throw Error('Error in method has occurred if you have not followed this recommendation => Element of executors has to be [service, its method]; (at moduleDecorator)');
          }
        }
      }, {
        key: "initializeServices",
        value: function initializeServices(services) {
          var temporary = {};
          for (var Service in services) {
            temporary[Service] = services[Service];
          }
          return temporary;
        }
      }, {
        key: "setupAdditionalMethods",
        value: function setupAdditionalMethods(methods) {
          if (!methods || methods.length === 0) return;
          methods.forEach(function (method) {
            return method();
          });
        }
      }]);
      return ModuleWithServices;
    }(target);
    Object.defineProperties(ModuleWithServices, {
      name: {
        value: params.name,
        writable: false
      },
      url: {
        value: params.url,
        writable: false
      }
    });
    return ModuleWithServices;
  };
}

/***/ }),

/***/ "./src/core/decorators/ServiceDecorator.ts":
/*!*************************************************!*\
  !*** ./src/core/decorators/ServiceDecorator.ts ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   DisableFeatures: () => (/* binding */ DisableFeatures),
/* harmony export */   Feature: () => (/* binding */ Feature),
/* harmony export */   ServiceDecorator: () => (/* binding */ ServiceDecorator)
/* harmony export */ });
/* harmony import */ var _dependencyContainer_dependencyContainer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../dependencyContainer/dependencyContainer */ "./src/core/dependencyContainer/dependencyContainer.ts");

function MethodDecorator(target, propertyKey, descriptor) {
  descriptor.value.classname = target.constructor.name;
  return descriptor;
}
function ServiceDecorator(service) {
  var proto = service.prototype;
  var methodNames = Object.getOwnPropertyNames(proto);
  methodNames.forEach(function (methodName) {
    var methodDescriptor = Object.getOwnPropertyDescriptor(proto, methodName);
    if (methodDescriptor && typeof methodDescriptor.value === "function") {
      MethodDecorator(proto, methodName, methodDescriptor);
    }
  });
  Object.defineProperty(service, "classname", {
    value: service.name
  });
  _dependencyContainer_dependencyContainer__WEBPACK_IMPORTED_MODULE_0__["default"].registerService(service.name, service);
  return service;
}
function Feature(feature) {
  return function (target, propertyKey, descriptor) {
    descriptor.value.feature = feature;
    return descriptor;
  };
}
function DisableFeatures(_ref) {
  var method = _ref.method,
    features = _ref.features,
    link = _ref.link;
  return function (args) {
    if (features) {
      var methodDescriptors = Object.getOwnPropertyDescriptors(link.constructor.prototype);
      var disableFeatures = features;
      for (var disableFeature in disableFeatures) {
        for (var feature in methodDescriptors) {
          var methodDescriptor = methodDescriptors[feature];
          var featureName = methodDescriptor.value.feature;
          if (disableFeatures[disableFeature] && featureName === disableFeature) {
            link.constructor.prototype[feature] = function () {
              return;
            };
          }
        }
      }
    }
    var linked = method.bind(link);
    return linked(args);
  };
}

/***/ }),

/***/ "./src/core/dependencyContainer/dependencyContainer.ts":
/*!*************************************************************!*\
  !*** ./src/core/dependencyContainer/dependencyContainer.ts ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   DependencyContainer: () => (/* binding */ DependencyContainer),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
var DependencyContainer = /*#__PURE__*/function () {
  function DependencyContainer() {
    _classCallCheck(this, DependencyContainer);
    // need to save and reuse repeatedly services
    _defineProperty(this, "services", new Map());
  }
  _createClass(DependencyContainer, [{
    key: "registerService",
    value: function registerService(key, service) {
      if (!this.services.has(key)) {
        var template = new service();
        this.services.set(key, template);
      }
    }
  }, {
    key: "getService",
    value: function getService(key) {
      var service = this.services.get(key);
      if (!service) {
        throw new Error('An error occurred while trying to get the service');
      }
      return service;
    }
  }]);
  return DependencyContainer;
}();
var dependencyContainer = new DependencyContainer();
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (dependencyContainer);

/***/ }),

/***/ "./src/core/extensionCoreModule.ts":
/*!*****************************************!*\
  !*** ./src/core/extensionCoreModule.ts ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ExtensionCoreModule: () => (/* binding */ ExtensionCoreModule)
/* harmony export */ });
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
var ExtensionCoreModule = /*#__PURE__*/function () {
  function ExtensionCoreModule(config) {
    _classCallCheck(this, ExtensionCoreModule);
    // Module creates main logic of program.
    // Don't use it to work.
    _defineProperty(this, "modules", void 0);
    this.modules = this.putModules(config);
  }
  _createClass(ExtensionCoreModule, [{
    key: "setup",
    value: function setup() {
      //console.log('---------------------------------- > setup is executing !!')
      this.modules.forEach(function (m) {
        return m.setup();
      });
      //console.log(this.modules)
    }
  }, {
    key: "reSetup",
    value: function reSetup(config) {
      //console.log('---------------------------------- > reSetup is executing !!')
      this.modules = [];
      this.modules = this.putModules(config);
      this.setup();
    }
  }, {
    key: "putModules",
    value: function putModules(config) {
      return config.functionalities.map(function (Module) {
        return new Module();
      });
    }
  }]);
  return ExtensionCoreModule;
}();

/***/ }),

/***/ "./src/core/observer/ModuleTurner.ts":
/*!*******************************************!*\
  !*** ./src/core/observer/ModuleTurner.ts ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ModuleTurner: () => (/* binding */ ModuleTurner)
/* harmony export */ });
/* harmony import */ var _decorators_ServiceDecorator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../decorators/ServiceDecorator */ "./src/core/decorators/ServiceDecorator.ts");
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
var _class;
function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, defineProperty = Object.defineProperty || function (obj, key, desc) { obj[key] = desc.value; }, $Symbol = "function" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || "@@iterator", asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator", toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, ""); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return defineProperty(generator, "_invoke", { value: makeInvokeMethod(innerFn, self, context) }), generator; } function tryCatch(fn, obj, arg) { try { return { type: "normal", arg: fn.call(obj, arg) }; } catch (err) { return { type: "throw", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { ["next", "throw", "return"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if ("throw" !== record.type) { var result = record.arg, value = result.value; return value && "object" == _typeof(value) && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke("next", value, resolve, reject); }, function (err) { invoke("throw", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke("throw", error, resolve, reject); }); } reject(record.arg); } var previousPromise; defineProperty(this, "_invoke", { value: function value(method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(innerFn, self, context) { var state = "suspendedStart"; return function (method, arg) { if ("executing" === state) throw new Error("Generator is already running"); if ("completed" === state) { if ("throw" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) { if ("suspendedStart" === state) throw state = "completed", context.arg; context.dispatchException(context.arg); } else "return" === context.method && context.abrupt("return", context.arg); state = "executing"; var record = tryCatch(innerFn, self, context); if ("normal" === record.type) { if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg); } }; } function maybeInvokeDelegate(delegate, context) { var methodName = context.method, method = delegate.iterator[methodName]; if (undefined === method) return context.delegate = null, "throw" === methodName && delegate.iterator["return"] && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method) || "return" !== methodName && (context.method = "throw", context.arg = new TypeError("The iterator does not provide a '" + methodName + "' method")), ContinueSentinel; var record = tryCatch(method, delegate.iterator, context.arg); if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = "normal", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: "root" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if ("function" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, defineProperty(Gp, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), defineProperty(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) { var ctor = "function" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, "toString", function () { return "[object Generator]"; }), exports.keys = function (val) { var object = Object(val), keys = []; for (var key in object) keys.push(key); return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if ("throw" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if ("root" === entry.tryLoc) return handle("end"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, "catchLoc"), hasFinally = hasOwn.call(entry, "finallyLoc"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error("try statement without catch or finally"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if ("throw" === record.type) throw record.arg; return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, "catch": function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if ("throw" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error("illegal catch attempt"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, "next" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }
function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }
function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }

var ModuleTurner = (0,_decorators_ServiceDecorator__WEBPACK_IMPORTED_MODULE_0__.ServiceDecorator)(_class = /*#__PURE__*/function () {
  function ModuleTurner() {
    _classCallCheck(this, ModuleTurner);
    _defineProperty(this, "changeTurnEvents", []);
    _defineProperty(this, "currentElement", void 0);
    _defineProperty(this, "extension", void 0);
    _defineProperty(this, "config", void 0);
    _defineProperty(this, "Config", void 0);
  }
  _createClass(ModuleTurner, [{
    key: "initialModuleTurner",
    value: function initialModuleTurner(extension, config, Config) {
      this.extension = extension;
      this.config = config;
      this.Config = Config;
    }
  }, {
    key: "registerTurnHandle",
    value: function registerTurnHandle(_ref) {
      var _this = this;
      var turnHandle = _ref.turnHandle,
        elementID = _ref.elementID,
        browserEvent = _ref.browserEvent;
      this.changeTurnEvents.push({
        turnHandle: turnHandle,
        elementID: elementID,
        browserEvent: browserEvent
      });
      document.body.addEventListener(browserEvent, function (e) {
        console.log(e.target.id);
        if (e.target.id === elementID) {
          setTimeout(function () {
            return _this.reselectModules().then(function () {
              if (turnHandle) turnHandle();
              _this.currentElement = e.target;
            });
          }, 1000);
        }
      });
    }
  }, {
    key: "getTurnEvents",
    get: function get() {
      return _toConsumableArray(this.changeTurnEvents);
    }
  }, {
    key: "reselectModules",
    value: function () {
      var _reselectModules = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
        var _yield$import, matchModuleToUrl, currentURL;
        return _regeneratorRuntime().wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              _context.next = 2;
              return Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ../decorators/ExtensionConfig */ "./src/core/decorators/ExtensionConfig.ts"));
            case 2:
              _yield$import = _context.sent;
              matchModuleToUrl = _yield$import.matchModuleToUrl;
              currentURL = new URL(window.location.href);
              this.config = matchModuleToUrl(this.config, currentURL.href);
              this.Config.setConfig(this.config);
              this.extension.reSetup(this.Config.getConfig());
            case 8:
            case "end":
              return _context.stop();
          }
        }, _callee, this);
      }));
      function reselectModules() {
        return _reselectModules.apply(this, arguments);
      }
      return reselectModules;
    }()
  }]);
  return ModuleTurner;
}()) || _class;

/***/ }),

/***/ "./src/core/providers/moduleProvider.ts":
/*!**********************************************!*\
  !*** ./src/core/providers/moduleProvider.ts ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ModuleProvider: () => (/* binding */ ModuleProvider)
/* harmony export */ });
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _iterableToArrayLimit(arr, i) { var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"]; if (null != _i) { var _s, _e, _x, _r, _arr = [], _n = !0, _d = !1; try { if (_x = (_i = _i.call(arr)).next, 0 === i) { if (Object(_i) !== _i) return; _n = !1; } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0); } catch (err) { _d = !0, _e = err; } finally { try { if (!_n && null != _i["return"] && (_r = _i["return"](), Object(_r) !== _r)) return; } finally { if (_d) throw _e; } } return _arr; } }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
var ModuleProvider = /*#__PURE__*/function () {
  function ModuleProvider(params) {
    _classCallCheck(this, ModuleProvider);
    _defineProperty(this, "_params", void 0);
    this._params = this.adaptParams(params);
  }
  _createClass(ModuleProvider, [{
    key: "params",
    get: function get() {
      return this._params;
    }
  }, {
    key: "adaptParams",
    value: function adaptParams(params) {
      return {
        name: params.name,
        url: params.url,
        mainService: params.mainService,
        services: params.services,
        executors: this.adaptExecutors(params),
        setupFunction: this.adaptSetupFunction(params)
      };
    }
  }, {
    key: "adaptSetupFunction",
    value: function adaptSetupFunction(params) {
      return this.verifyMethod(params, params.setupFunction).bind(params.mainService);
    }
  }, {
    key: "adaptExecutors",
    value: function adaptExecutors(params) {
      var _this = this;
      if (!params.executors || params.executors.length === 0) return params.executors;
      return params.executors.map(function (_ref) {
        var _ref2 = _slicedToArray(_ref, 2),
          s = _ref2[0],
          m = _ref2[1];
        return _this.verifyMethod(params, m).bind(s);
      });
    }
  }, {
    key: "verifyMethod",
    value: function verifyMethod(params, method) {
      var inheritedClassNameMethod;
      try {
        inheritedClassNameMethod = Object.getOwnPropertyDescriptors(method).classname.value;
      } catch (e) {
        throw Error('Error in method has occurred if you have not followed these recommendations: 1) Use function declaration instead of function expression; 2) Use ServiceDecorator; (at moduleProvider)', e);
      }
      var verify;
      for (var prop in params.services) {
        var service = params.services[prop];
        var serviceName = params.services[prop].constructor.prototype.constructor.classname;
        verify = inheritedClassNameMethod === serviceName;
        if (verify) {
          break;
        } else {
          verify = this.verifyWithDerivativeServices(service, inheritedClassNameMethod);
          if (verify) {
            break;
          }
        }
      }
      if (!verify) throw Error('Error has occurred if you have not followed these recommendations: 1) You have to use reference to your service or method; 2) Setup method must belong to main service but it is not; (at moduleProvider)');
      return method;
    }
  }, {
    key: "verifyWithDerivativeServices",
    value: function verifyWithDerivativeServices(service, inheritedClassNameMethod) {
      function checkService(service) {
        for (var key in service) {
          if (_typeof(service[key]) === 'object') {
            var result = checkService(service[key]);
            if (result) return true;
          } else if (typeof service[key] === 'function') {
            var nameOfInnerProperty = Object.getPrototypeOf(service[key]).constructor.name;
            if (nameOfInnerProperty === inheritedClassNameMethod) return true;
          }
        }
        return false;
      }
      return checkService(service);
    }
  }]);
  return ModuleProvider;
}();

/***/ }),

/***/ "./src/modules/googleMeetModule/googleMeetModule.ts":
/*!**********************************************************!*\
  !*** ./src/modules/googleMeetModule/googleMeetModule.ts ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   GoogleMeetModule: () => (/* binding */ GoogleMeetModule)
/* harmony export */ });
/* harmony import */ var _core_decorators_ModuleDecorator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../core/decorators/ModuleDecorator */ "./src/core/decorators/ModuleDecorator.ts");
/* harmony import */ var _services_googleMeetService__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./services/googleMeetService */ "./src/modules/googleMeetModule/services/googleMeetService.ts");
/* harmony import */ var _core_dependencyContainer_dependencyContainer__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../core/dependencyContainer/dependencyContainer */ "./src/core/dependencyContainer/dependencyContainer.ts");
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
var _dec, _class;
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }



var googleMeetService = _core_dependencyContainer_dependencyContainer__WEBPACK_IMPORTED_MODULE_2__["default"].getService(_services_googleMeetService__WEBPACK_IMPORTED_MODULE_1__.GoogleMeetService.name);
var GoogleMeetModule = (_dec = (0,_core_decorators_ModuleDecorator__WEBPACK_IMPORTED_MODULE_0__.ModuleDecorator)({
  name: _services_googleMeetService__WEBPACK_IMPORTED_MODULE_1__.GoogleMeetService.name,
  url: 'https://meet.google.com/*',
  mainService: googleMeetService,
  services: _defineProperty({}, _services_googleMeetService__WEBPACK_IMPORTED_MODULE_1__.GoogleMeetService.name, googleMeetService),
  setupFunction: googleMeetService.runObserve,
  executors: [[googleMeetService, googleMeetService.register]]
}), _dec(_class = /*#__PURE__*/_createClass(function GoogleMeetModule() {
  _classCallCheck(this, GoogleMeetModule);
})) || _class);

/***/ }),

/***/ "./src/modules/googleMeetModule/services/controllers/inAnyCaseController.ts":
/*!**********************************************************************************!*\
  !*** ./src/modules/googleMeetModule/services/controllers/inAnyCaseController.ts ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   InAnyCaseController: () => (/* binding */ InAnyCaseController)
/* harmony export */ });
/* harmony import */ var _core_dependencyContainer_dependencyContainer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../core/dependencyContainer/dependencyContainer */ "./src/core/dependencyContainer/dependencyContainer.ts");
/* harmony import */ var _secondaryServices_googleMeetMainFunctionsService__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../secondaryServices/googleMeetMainFunctionsService */ "./src/modules/googleMeetModule/services/secondaryServices/googleMeetMainFunctionsService.ts");
/* harmony import */ var _intermediaryServices_intermediaryService__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../intermediaryServices/intermediaryService */ "./src/modules/intermediaryServices/intermediaryService.ts");
/* harmony import */ var _core_decorators_ServiceDecorator__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../../core/decorators/ServiceDecorator */ "./src/core/decorators/ServiceDecorator.ts");
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
var _class;
function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, defineProperty = Object.defineProperty || function (obj, key, desc) { obj[key] = desc.value; }, $Symbol = "function" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || "@@iterator", asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator", toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, ""); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return defineProperty(generator, "_invoke", { value: makeInvokeMethod(innerFn, self, context) }), generator; } function tryCatch(fn, obj, arg) { try { return { type: "normal", arg: fn.call(obj, arg) }; } catch (err) { return { type: "throw", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { ["next", "throw", "return"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if ("throw" !== record.type) { var result = record.arg, value = result.value; return value && "object" == _typeof(value) && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke("next", value, resolve, reject); }, function (err) { invoke("throw", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke("throw", error, resolve, reject); }); } reject(record.arg); } var previousPromise; defineProperty(this, "_invoke", { value: function value(method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(innerFn, self, context) { var state = "suspendedStart"; return function (method, arg) { if ("executing" === state) throw new Error("Generator is already running"); if ("completed" === state) { if ("throw" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) { if ("suspendedStart" === state) throw state = "completed", context.arg; context.dispatchException(context.arg); } else "return" === context.method && context.abrupt("return", context.arg); state = "executing"; var record = tryCatch(innerFn, self, context); if ("normal" === record.type) { if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg); } }; } function maybeInvokeDelegate(delegate, context) { var methodName = context.method, method = delegate.iterator[methodName]; if (undefined === method) return context.delegate = null, "throw" === methodName && delegate.iterator["return"] && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method) || "return" !== methodName && (context.method = "throw", context.arg = new TypeError("The iterator does not provide a '" + methodName + "' method")), ContinueSentinel; var record = tryCatch(method, delegate.iterator, context.arg); if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = "normal", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: "root" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if ("function" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, defineProperty(Gp, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), defineProperty(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) { var ctor = "function" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, "toString", function () { return "[object Generator]"; }), exports.keys = function (val) { var object = Object(val), keys = []; for (var key in object) keys.push(key); return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if ("throw" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if ("root" === entry.tryLoc) return handle("end"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, "catchLoc"), hasFinally = hasOwn.call(entry, "finallyLoc"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error("try statement without catch or finally"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if ("throw" === record.type) throw record.arg; return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, "catch": function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if ("throw" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error("illegal catch attempt"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, "next" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }
function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }




var InAnyCaseController = (0,_core_decorators_ServiceDecorator__WEBPACK_IMPORTED_MODULE_3__.ServiceDecorator)(_class = /*#__PURE__*/function () {
  function InAnyCaseController() {
    var IntermediaryService = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _intermediaryServices_intermediaryService__WEBPACK_IMPORTED_MODULE_2__["default"];
    var MainFunctionsService = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _core_dependencyContainer_dependencyContainer__WEBPACK_IMPORTED_MODULE_0__["default"].getService(_secondaryServices_googleMeetMainFunctionsService__WEBPACK_IMPORTED_MODULE_1__.GoogleMeetMainFunctionsService.name);
    _classCallCheck(this, InAnyCaseController);
    this.IntermediaryService = IntermediaryService;
    this.MainFunctionsService = MainFunctionsService;
    _defineProperty(this, "meetParticipantsParams", {
      previousPartyQty: 0
    });
    _defineProperty(this, "disableFeatures", null);
    _defineProperty(this, "dataParams", {
      meetingsData: false,
      rules: null,
      currentMeetingTitle: "Topic is absent"
    });
  }
  _createClass(InAnyCaseController, [{
    key: "executingInAnyCase",
    value: function executingInAnyCase() {
      var _this = this;
      this.dataParams.currentMeetingTitle = this.MainFunctionsService.getMeetTopic(this.dataParams.meetingsData); // function for processing meeting name depends on local time

      this.dataParams.rules = this.dataParams.meetingsData && Object.values(this.dataParams.meetingsData.googlemeetRules).find(function (m) {
        return m.title === _this.dataParams.currentMeetingTitle;
      }).rules;
      if (!this.dataParams.meetingsData) _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
        var _Object$values$find;
        var _yield$_this$Intermed, meetService, disabledFeatures;
        return _regeneratorRuntime().wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              _context.next = 2;
              return _this.IntermediaryService.rulesIntermediaryService.getRules();
            case 2:
              _yield$_this$Intermed = _context.sent;
              meetService = _yield$_this$Intermed.meetService;
              disabledFeatures = _yield$_this$Intermed.disabledFeatures;
              _this.dataParams.meetingsData = meetService;
              _this.disableFeatures = disabledFeatures;
              _this.meetParticipantsParams.previousPartyQty = (_Object$values$find = Object.values(_this.dataParams.meetingsData.googlemeetRules).find(function (m) {
                return m.title === _this.dataParams.currentMeetingTitle;
              })) === null || _Object$values$find === void 0 ? void 0 : _Object$values$find.rules.autoJoinParticipantsQuantity;
            case 8:
            case "end":
              return _context.stop();
          }
        }, _callee);
      }))();
      return {
        currentMeetingTitle: this.dataParams.currentMeetingTitle,
        rules: this.dataParams.rules,
        meetingsData: this.dataParams.meetingsData,
        disableFeatures: this.disableFeatures,
        previousPartyQty: this.meetParticipantsParams.previousPartyQty
      };
    }
  }]);
  return InAnyCaseController;
}()) || _class;

/***/ }),

/***/ "./src/modules/googleMeetModule/services/controllers/meetHappeningController.ts":
/*!**************************************************************************************!*\
  !*** ./src/modules/googleMeetModule/services/controllers/meetHappeningController.ts ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   MeetHappeningController: () => (/* binding */ MeetHappeningController)
/* harmony export */ });
/* harmony import */ var _core_dependencyContainer_dependencyContainer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../core/dependencyContainer/dependencyContainer */ "./src/core/dependencyContainer/dependencyContainer.ts");
/* harmony import */ var _secondaryServices_googleMeetUtilsService__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../secondaryServices/googleMeetUtilsService */ "./src/modules/googleMeetModule/services/secondaryServices/googleMeetUtilsService.ts");
/* harmony import */ var _secondaryServices_googleMeetMainFunctionsService__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../secondaryServices/googleMeetMainFunctionsService */ "./src/modules/googleMeetModule/services/secondaryServices/googleMeetMainFunctionsService.ts");
/* harmony import */ var _secondaryServices_googleMeetConditionService__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../secondaryServices/googleMeetConditionService */ "./src/modules/googleMeetModule/services/secondaryServices/googleMeetConditionService.ts");
/* harmony import */ var _secondaryServices_googleMeetMediaService__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../secondaryServices/googleMeetMediaService */ "./src/modules/googleMeetModule/services/secondaryServices/googleMeetMediaService.ts");
/* harmony import */ var _secondaryServices_googleMeetDOMManipulationsService__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../secondaryServices/googleMeetDOMManipulationsService */ "./src/modules/googleMeetModule/services/secondaryServices/googleMeetDOMManipulationsService.ts");
/* harmony import */ var _secondaryServices_googleMeetFullScreenService__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../secondaryServices/googleMeetFullScreenService */ "./src/modules/googleMeetModule/services/secondaryServices/googleMeetFullScreenService.ts");
/* harmony import */ var _secondaryServices_googleMeetEventRuleService__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../secondaryServices/googleMeetEventRuleService */ "./src/modules/googleMeetModule/services/secondaryServices/googleMeetEventRuleService.ts");
/* harmony import */ var _core_decorators_ServiceDecorator__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../../../core/decorators/ServiceDecorator */ "./src/core/decorators/ServiceDecorator.ts");
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
var _dec, _class, _class2;
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _iterableToArrayLimit(arr, i) { var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"]; if (null != _i) { var _s, _e, _x, _r, _arr = [], _n = !0, _d = !1; try { if (_x = (_i = _i.call(arr)).next, 0 === i) { if (Object(_i) !== _i) return; _n = !1; } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0); } catch (err) { _d = !0, _e = err; } finally { try { if (!_n && null != _i["return"] && (_r = _i["return"](), Object(_r) !== _r)) return; } finally { if (_d) throw _e; } } return _arr; } }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, defineProperty = Object.defineProperty || function (obj, key, desc) { obj[key] = desc.value; }, $Symbol = "function" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || "@@iterator", asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator", toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, ""); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return defineProperty(generator, "_invoke", { value: makeInvokeMethod(innerFn, self, context) }), generator; } function tryCatch(fn, obj, arg) { try { return { type: "normal", arg: fn.call(obj, arg) }; } catch (err) { return { type: "throw", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { ["next", "throw", "return"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if ("throw" !== record.type) { var result = record.arg, value = result.value; return value && "object" == _typeof(value) && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke("next", value, resolve, reject); }, function (err) { invoke("throw", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke("throw", error, resolve, reject); }); } reject(record.arg); } var previousPromise; defineProperty(this, "_invoke", { value: function value(method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(innerFn, self, context) { var state = "suspendedStart"; return function (method, arg) { if ("executing" === state) throw new Error("Generator is already running"); if ("completed" === state) { if ("throw" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) { if ("suspendedStart" === state) throw state = "completed", context.arg; context.dispatchException(context.arg); } else "return" === context.method && context.abrupt("return", context.arg); state = "executing"; var record = tryCatch(innerFn, self, context); if ("normal" === record.type) { if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg); } }; } function maybeInvokeDelegate(delegate, context) { var methodName = context.method, method = delegate.iterator[methodName]; if (undefined === method) return context.delegate = null, "throw" === methodName && delegate.iterator["return"] && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method) || "return" !== methodName && (context.method = "throw", context.arg = new TypeError("The iterator does not provide a '" + methodName + "' method")), ContinueSentinel; var record = tryCatch(method, delegate.iterator, context.arg); if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = "normal", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: "root" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if ("function" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, defineProperty(Gp, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), defineProperty(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) { var ctor = "function" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, "toString", function () { return "[object Generator]"; }), exports.keys = function (val) { var object = Object(val), keys = []; for (var key in object) keys.push(key); return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if ("throw" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if ("root" === entry.tryLoc) return handle("end"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, "catchLoc"), hasFinally = hasOwn.call(entry, "finallyLoc"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error("try statement without catch or finally"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if ("throw" === record.type) throw record.arg; return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, "catch": function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if ("throw" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error("illegal catch attempt"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, "next" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }
function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }









var MeetHappeningController = (_dec = (0,_core_decorators_ServiceDecorator__WEBPACK_IMPORTED_MODULE_8__.Feature)('disableRecordFeature'), (0,_core_decorators_ServiceDecorator__WEBPACK_IMPORTED_MODULE_8__.ServiceDecorator)(_class = (_class2 = /*#__PURE__*/function () {
  function MeetHappeningController() {
    var UtilsService = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _core_dependencyContainer_dependencyContainer__WEBPACK_IMPORTED_MODULE_0__["default"].getService(_secondaryServices_googleMeetUtilsService__WEBPACK_IMPORTED_MODULE_1__.GoogleMeetUtilsService.name);
    var MainFunctionsService = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _core_dependencyContainer_dependencyContainer__WEBPACK_IMPORTED_MODULE_0__["default"].getService(_secondaryServices_googleMeetMainFunctionsService__WEBPACK_IMPORTED_MODULE_2__.GoogleMeetMainFunctionsService.name);
    var ConditionService = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : _core_dependencyContainer_dependencyContainer__WEBPACK_IMPORTED_MODULE_0__["default"].getService(_secondaryServices_googleMeetConditionService__WEBPACK_IMPORTED_MODULE_3__.GoogleMeetConditionService.name);
    var MediaService = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : _core_dependencyContainer_dependencyContainer__WEBPACK_IMPORTED_MODULE_0__["default"].getService(_secondaryServices_googleMeetMediaService__WEBPACK_IMPORTED_MODULE_4__.GoogleMeetMediaService.name);
    var DOMManipulationService = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : _core_dependencyContainer_dependencyContainer__WEBPACK_IMPORTED_MODULE_0__["default"].getService(_secondaryServices_googleMeetDOMManipulationsService__WEBPACK_IMPORTED_MODULE_5__.GoogleMeetDOMManipulationsService.name);
    var FullScreenService = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : _core_dependencyContainer_dependencyContainer__WEBPACK_IMPORTED_MODULE_0__["default"].getService(_secondaryServices_googleMeetFullScreenService__WEBPACK_IMPORTED_MODULE_6__.GoogleMeetFullScreenService.name);
    var RuleService = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : _core_dependencyContainer_dependencyContainer__WEBPACK_IMPORTED_MODULE_0__["default"].getService(_secondaryServices_googleMeetEventRuleService__WEBPACK_IMPORTED_MODULE_7__.GoogleMeetEventRuleService.name);
    _classCallCheck(this, MeetHappeningController);
    this.UtilsService = UtilsService;
    this.MainFunctionsService = MainFunctionsService;
    this.ConditionService = ConditionService;
    this.MediaService = MediaService;
    this.DOMManipulationService = DOMManipulationService;
    this.FullScreenService = FullScreenService;
    this.RuleService = RuleService;
    _defineProperty(this, "controllers", {
      controller: 0,
      onMeetWindow: false
    });
    _defineProperty(this, "CustomDOMNodes", {
      miniVideo: null
    });
    _defineProperty(this, "DOMNodesId", {
      miniVideoId: 'mini-video'
    });
    _defineProperty(this, "dataParams", {
      meetingsData: false,
      rules: null,
      currentMeetingTitle: "Topic is absent",
      exitConfigList: []
    });
    _defineProperty(this, "meetParticipantsParams", {
      maxPartyQty: 0,
      previousPartyQty: 0,
      party: [],
      guests: []
    });
    _defineProperty(this, "conditionParams", {
      leaveWithMyFriends: false,
      disabledParticipants: false,
      subtitlesOn: false,
      isCameraOff: false,
      isMeeting: false
    });
    _defineProperty(this, "fullScreenParams", {
      exitFullScreen: false,
      isFullScreenEnabled: false,
      isScreenSharingActive: false,
      DOMSubtitlesChanged: false
    });
    _defineProperty(this, "recordParams", {
      hasRecordBegun: false,
      scaleTranslationBlock: false,
      animationKeyframes: document.styleSheets[0].insertRule("\n        @keyframes recordButtonAnimation {\n          0% {\n            transform: scale(1, 1);\n          }\n          50% {\n            transform: scale(1.2, 1.2);\n          }\n          100% {\n            transform: scale(1, 1);\n          }\n        }\n      ", document.styleSheets[0].cssRules.length),
      styleAnimation: {
        animationName: 'recordButtonAnimation',
        animationDuration: '2s',
        animationTimingFunction: 'ease-in-out',
        animationIterationCount: 'infinite',
        boxShadow: '0px 0px 4px 3px rgba(165,42,42,0.4)'
      }
    });
  }
  _createClass(MeetHappeningController, [{
    key: "meetingHasStartedAndItIsHappening",
    value: function meetingHasStartedAndItIsHappening(_ref) {
      var belowBlockBtnExtMeeting = _ref.belowBlockBtnExtMeeting,
        redButton = _ref.redButton,
        sharedScreen = _ref.sharedScreen,
        sharingNotice = _ref.sharingNotice,
        recordButton = _ref.recordButton,
        goMessage = _ref.goMessage,
        isMeeting = _ref.isMeeting,
        previousPartyQty = _ref.previousPartyQty,
        rules = _ref.rules,
        currentMeetingTitle = _ref.currentMeetingTitle,
        meetingsData = _ref.meetingsData;
      this.setupMeetingData(meetingsData, currentMeetingTitle, isMeeting, rules, previousPartyQty, belowBlockBtnExtMeeting);
      this.handleCameraOff(belowBlockBtnExtMeeting);
      this.handleSubtitles(belowBlockBtnExtMeeting);
      this.keepTabActive();
      this.updatePartyInformation();
      this.handleExitMeeting(redButton, goMessage, sharingNotice);
      this.handleFullScreen(sharingNotice);
      this.handleRecording(recordButton, belowBlockBtnExtMeeting);
      this.scaleTranslationBlock(sharingNotice);
      this.manageMiniVideo(sharingNotice);
      this.updateScreenSharingStatus(sharedScreen, sharingNotice);
      this.manageDOMSubtitles();
      return {
        onMeetWindow: this.controllers.onMeetWindow,
        scaleTranslationBlock: this.recordParams.scaleTranslationBlock
      };
    }
  }, {
    key: "setupMeetingData",
    value: function setupMeetingData(meetingsData, currentMeetingTitle, isMeeting, rules, previousPartyQty, belowBlockBtnExtMeeting) {
      this.dataParams.meetingsData = meetingsData;
      this.dataParams.currentMeetingTitle = currentMeetingTitle;
      this.conditionParams.isMeeting = isMeeting;
      this.dataParams.rules = rules;
      if (!isMeeting) this.meetParticipantsParams.previousPartyQty = previousPartyQty;
      if (belowBlockBtnExtMeeting) this.controllers.onMeetWindow = true;
    }
  }, {
    key: "handleCameraOff",
    value: function handleCameraOff(belowBlockBtnExtMeeting) {
      var _this$dataParams$rule,
        _this = this;
      if (belowBlockBtnExtMeeting && (_this$dataParams$rule = this.dataParams.rules) !== null && _this$dataParams$rule !== void 0 && _this$dataParams$rule.joinWithCameraOff && !this.conditionParams.isCameraOff) {
        _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
          var _yield$_this$DOMManip, cameraUI, isCameraOff, cameraBtn;
          return _regeneratorRuntime().wrap(function _callee$(_context) {
            while (1) switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return _this.DOMManipulationService.disableCamera(belowBlockBtnExtMeeting);
              case 2:
                _yield$_this$DOMManip = _context.sent;
                cameraUI = _yield$_this$DOMManip.cameraUI;
                isCameraOff = _yield$_this$DOMManip.isCameraOff;
                cameraBtn = _yield$_this$DOMManip.cameraBtn;
                _this.conditionParams.isCameraOff = isCameraOff;
                _this.UtilsService.delay(function () {
                  var isCameraOn = cameraUI === null || cameraUI === void 0 ? void 0 : cameraUI.getAttribute('class').includes('HotEze');
                  _this.conditionParams.isCameraOff && isCameraOn && _this.DOMManipulationService.turnOnOffCameraHandle(cameraBtn);
                }, 2000);
              case 8:
              case "end":
                return _context.stop();
            }
          }, _callee);
        }))();
      }
    }
  }, {
    key: "handleSubtitles",
    value: function handleSubtitles(belowBlockBtnExtMeeting) {
      var _this$dataParams$rule2,
        _this2 = this;
      if (belowBlockBtnExtMeeting && (_this$dataParams$rule2 = this.dataParams.rules) !== null && _this$dataParams$rule2 !== void 0 && _this$dataParams$rule2.showSubtitles && !this.conditionParams.subtitlesOn) {
        try {
          var _belowBlockBtnExtMeet;
          var settingsMenu = Array.from((_belowBlockBtnExtMeet = belowBlockBtnExtMeeting.childNodes[1]) === null || _belowBlockBtnExtMeet === void 0 ? void 0 : _belowBlockBtnExtMeet.querySelector('div').childNodes).reverse()[1];
          if (settingsMenu) {
            this.UtilsService.delay(function () {
              return _this2.UtilsService.onSubtitles(settingsMenu);
            }, 3000);
            this.conditionParams.subtitlesOn = true;
          }
        } catch (e) {}
      }
    }
  }, {
    key: "keepTabActive",
    value: function keepTabActive() {
      var _this$dataParams$rule3;
      if ((_this$dataParams$rule3 = this.dataParams.rules) !== null && _this$dataParams$rule3 !== void 0 && _this$dataParams$rule3.keepTabActive && this.conditionParams.isMeeting) {
        chrome.runtime.sendMessage({
          action: 'keepTabActive'
        }); // there is a problem with moving to another tab when you are clicking and pressing mouse`s left button on tab which is not google meet, I added in background.js delay when the chrome event is checking moment of moving to another page, the event is called OnActivate
      }
    }
  }, {
    key: "updatePartyInformation",
    value: function updatePartyInformation() {
      this.meetParticipantsParams.maxPartyQty = this.meetParticipantsParams.party.length;
      this.meetParticipantsParams.party = this.MainFunctionsService.getParty().length - this.meetParticipantsParams.party.length > 1 ? this.meetParticipantsParams.party : this.MainFunctionsService.getParty(); // way to avoid breaking and ending meet on extension user side after has been finished translating by him/her
      //console.log(this.meetParticipantsParams.party, '----------------------------> PARTY')

      var currentGuests = this.MainFunctionsService.guestsHandler(this.dataParams.exitConfigList, this.meetParticipantsParams.party);
      if (!this.meetParticipantsParams.guests.length && currentGuests) {
        this.meetParticipantsParams.guests = this.MainFunctionsService.guestsHandler(this.dataParams.exitConfigList, this.meetParticipantsParams.party);
      } else if (this.meetParticipantsParams.guests.length < (currentGuests === null || currentGuests === void 0 ? void 0 : currentGuests.length)) {
        this.meetParticipantsParams.guests = currentGuests;
      }
    }
  }, {
    key: "handleExitMeeting",
    value: function handleExitMeeting(redButton, goMessage, sharingNotice) {
      var _this3 = this;
      this.conditionParams.leaveWithMyFriends = Boolean(this.ConditionService.leaveWithMyFriendsHandle(this.dataParams.meetingsData, this.dataParams.rules, this.meetParticipantsParams.party));
      var checkExit = this.RuleService.checkIfConfigRule(this.dataParams.currentMeetingTitle, this.dataParams.exitConfigList, this.meetParticipantsParams.guests, this.meetParticipantsParams.party, this.dataParams.rules.percentageToLeave);
      //console.log(checkExit, '----------------------------------- > checkExit');
      if ((checkExit || this.meetParticipantsParams.party.length === 2) && this.meetParticipantsParams.maxPartyQty < this.meetParticipantsParams.previousPartyQty) {
        this.ConditionService.exitMeeting(redButton, this.meetParticipantsParams.party, this.dataParams.exitConfigList, this.conditionParams.isMeeting, this.controllers.controller);
      }
      this.meetParticipantsParams.previousPartyQty = this.meetParticipantsParams.maxPartyQty;
      if (goMessage[0] || sharingNotice) {
        this.meetParticipantsParams.party = this.MainFunctionsService.getParty();
        setTimeout(function () {
          if (_this3.ConditionService.checkIfAlone(_this3.meetParticipantsParams.party) || _this3.ConditionService.checkIfAloneAndScreenSharing(_this3.meetParticipantsParams.party)) {
            _this3.ConditionService.exitMeeting(redButton, _this3.meetParticipantsParams.party, _this3.dataParams.exitConfigList, _this3.conditionParams.isMeeting, _this3.controllers.controller);
          }
        }, 3000);
      }
    }
  }, {
    key: "handleFullScreen",
    value: function handleFullScreen(sharingNotice) {
      var _this4 = this;
      this.fullScreenParams.isFullScreenEnabled && window.addEventListener('keydown', function (e) {
        if (e.key === 'F11') _this4.fullScreenParams.exitFullScreen = true;
      });
      if (!sharingNotice) {
        this.fullScreenParams.isFullScreenEnabled = false;
        this.fullScreenParams.isScreenSharingActive = false;
        this.MediaService.deleteLocalTranslationBlock();
      }
      if (!sharingNotice && this.fullScreenParams.isScreenSharingActive) {
        chrome.runtime.sendMessage({
          action: 'disableFullScreen'
        });
        this.fullScreenParams.isScreenSharingActive = false;
      }
    }
  }, {
    key: "handleRecording",
    value: function handleRecording(recordButton, belowBlockBtnExtMeeting) {
      var _this5 = this;
      if (!this.recordParams.hasRecordBegun && recordButton) {
        var span = recordButton === null || recordButton === void 0 ? void 0 : recordButton.querySelector('span');
        Object.entries(this.recordParams.styleAnimation).forEach(function (_ref3) {
          var _ref4 = _slicedToArray(_ref3, 1),
            style = _ref4[0];
          return span.style[style] = '';
        });
      } else if (this.recordParams.hasRecordBegun && recordButton) {
        var _span = recordButton === null || recordButton === void 0 ? void 0 : recordButton.querySelector('span');
        Object.entries(this.recordParams.styleAnimation).forEach(function (_ref5) {
          var _ref6 = _slicedToArray(_ref5, 2),
            style = _ref6[0],
            value = _ref6[1];
          return _span.style[style] = value;
        });
      }
      if (belowBlockBtnExtMeeting && !recordButton) {
        var _recordButton = this.DOMManipulationService.createRecordButton(belowBlockBtnExtMeeting);
        this.UtilsService.handleManyClick(_recordButton, 1, /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {
          return _regeneratorRuntime().wrap(function _callee2$(_context2) {
            while (1) switch (_context2.prev = _context2.next) {
              case 0:
                if (!_this5.recordParams.hasRecordBegun) {
                  _context2.next = 5;
                  break;
                }
                _this5.recordParams.hasRecordBegun = false;
                _this5.MediaService.stopRecording();
                _context2.next = 8;
                break;
              case 5:
                _context2.next = 7;
                return _this5.MediaService.startRecording();
              case 7:
                _this5.recordParams.hasRecordBegun = true;
              case 8:
              case "end":
                return _context2.stop();
            }
          }, _callee2);
        })));
      }
    }
  }, {
    key: "scaleTranslationBlock",
    value: function scaleTranslationBlock(sharingNotice) {
      if (!this.recordParams.scaleTranslationBlock && sharingNotice) {
        var video = document.querySelectorAll('.Gv1mTb-aTv5jf')[0];
        video && this.MediaService.scaleNewTranslationBlock(video);
        this.recordParams.scaleTranslationBlock = true;
      }
    }
  }, {
    key: "manageMiniVideo",
    value: function manageMiniVideo(sharingNotice) {
      if (sharingNotice) {
        this.CustomDOMNodes.miniVideo = document.querySelectorAll('[jscontroller="h8UR3d"]')[0];
        this.CustomDOMNodes.miniVideo.id = this.DOMNodesId.miniVideoId;
      }
    }
  }, {
    key: "updateScreenSharingStatus",
    value: function updateScreenSharingStatus(sharedScreen, sharingNotice) {
      if (sharingNotice) {
        var checkScreenSharing = this.FullScreenService.checkScreenSharing(sharedScreen, this.fullScreenParams.isScreenSharingActive, this.fullScreenParams.isFullScreenEnabled, this.fullScreenParams.exitFullScreen);
        checkScreenSharing && (this.fullScreenParams.isScreenSharingActive = checkScreenSharing.isScreenSharingActive);
        checkScreenSharing && (this.fullScreenParams.isFullScreenEnabled = checkScreenSharing.isFullScreenEnabled);
      }
    }
  }, {
    key: "manageDOMSubtitles",
    value: function manageDOMSubtitles() {
      if (this.fullScreenParams.isFullScreenEnabled && this.fullScreenParams.isScreenSharingActive && !this.fullScreenParams.DOMSubtitlesChanged) {
        this.fullScreenParams.DOMSubtitlesChanged = this.DOMManipulationService.manageSubtitles();
      }
    }
  }]);
  return MeetHappeningController;
}(), (_applyDecoratedDescriptor(_class2.prototype, "handleRecording", [_dec], Object.getOwnPropertyDescriptor(_class2.prototype, "handleRecording"), _class2.prototype)), _class2)) || _class);

/***/ }),

/***/ "./src/modules/googleMeetModule/services/controllers/meetNotStartedController.ts":
/*!***************************************************************************************!*\
  !*** ./src/modules/googleMeetModule/services/controllers/meetNotStartedController.ts ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   MeetNotStartedController: () => (/* binding */ MeetNotStartedController)
/* harmony export */ });
/* harmony import */ var _core_decorators_ServiceDecorator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../core/decorators/ServiceDecorator */ "./src/core/decorators/ServiceDecorator.ts");
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
var _class;
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }

var MeetNotStartedController = (0,_core_decorators_ServiceDecorator__WEBPACK_IMPORTED_MODULE_0__.ServiceDecorator)(_class = /*#__PURE__*/function () {
  function MeetNotStartedController() {
    var _this = this;
    _classCallCheck(this, MeetNotStartedController);
    _defineProperty(this, "isMeeting", void 0);
    _defineProperty(this, "registerMeeting", function (rules, meetingsData, onMeetWindow) {
      if (!meetingsData) return console.warn('Data is loading');
      var participantsInMeeting = document.querySelectorAll('[jsname="YLEF4c"]').length - 1; // minus 1 because of div includes your personal account`s photo
      var joinBtn = document.querySelector('[jsname="Qx7uuf"]');
      var autoFullScreen = rules.fullscreenOnJoin;
      var autoJoin = rules.autoJoinParticipantsQuantity;
      if (participantsInMeeting >= autoJoin) {
        !onMeetWindow && joinBtn.click(); // auto join to meeting
        _this.isMeeting = true;
        if (autoFullScreen) {
          chrome.runtime.sendMessage({
            action: 'enterFullScreenJoin'
          });
        }
        console.log('Meeting has started');
      }
      console.log("Meeting has not started");
    });
  }
  _createClass(MeetNotStartedController, [{
    key: "beforeStart",
    value: function beforeStart(_ref) {
      var belowBlockBtnExtMeeting = _ref.belowBlockBtnExtMeeting,
        isMeeting = _ref.isMeeting,
        onMeetWindow = _ref.onMeetWindow,
        meetingsData = _ref.meetingsData,
        rules = _ref.rules;
      this.isMeeting = isMeeting;
      if (rules.autoJoinParticipantsQuantity === 0 && !belowBlockBtnExtMeeting) {
        this.registerMeeting(rules, meetingsData, onMeetWindow);
      } else if (!isMeeting && rules.autoJoinParticipantsQuantity > 0) {
        this.registerMeeting(rules, meetingsData, onMeetWindow);
      }
      return {
        isMeeting: this.isMeeting
      };
    }
  }]);
  return MeetNotStartedController;
}()) || _class;

/***/ }),

/***/ "./src/modules/googleMeetModule/services/googleMeetService.ts":
/*!********************************************************************!*\
  !*** ./src/modules/googleMeetModule/services/googleMeetService.ts ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   GoogleMeetService: () => (/* binding */ GoogleMeetService)
/* harmony export */ });
/* harmony import */ var _core_decorators_ServiceDecorator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../core/decorators/ServiceDecorator */ "./src/core/decorators/ServiceDecorator.ts");
/* harmony import */ var _secondaryServices_googleMeetDOMManipulationsService__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./secondaryServices/googleMeetDOMManipulationsService */ "./src/modules/googleMeetModule/services/secondaryServices/googleMeetDOMManipulationsService.ts");
/* harmony import */ var _secondaryServices_googleMeetMediaService__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./secondaryServices/googleMeetMediaService */ "./src/modules/googleMeetModule/services/secondaryServices/googleMeetMediaService.ts");
/* harmony import */ var _core_dependencyContainer_dependencyContainer__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../core/dependencyContainer/dependencyContainer */ "./src/core/dependencyContainer/dependencyContainer.ts");
/* harmony import */ var _controllers_inAnyCaseController__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./controllers/inAnyCaseController */ "./src/modules/googleMeetModule/services/controllers/inAnyCaseController.ts");
/* harmony import */ var _controllers_meetNotStartedController__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./controllers/meetNotStartedController */ "./src/modules/googleMeetModule/services/controllers/meetNotStartedController.ts");
/* harmony import */ var _controllers_meetHappeningController__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./controllers/meetHappeningController */ "./src/modules/googleMeetModule/services/controllers/meetHappeningController.ts");
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
var _class;
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }







var GoogleMeetService = (0,_core_decorators_ServiceDecorator__WEBPACK_IMPORTED_MODULE_0__.ServiceDecorator)(_class = /*#__PURE__*/function () {
  function GoogleMeetService() {
    var _this = this;
    var DOMManipulationService = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _core_dependencyContainer_dependencyContainer__WEBPACK_IMPORTED_MODULE_3__["default"].getService(_secondaryServices_googleMeetDOMManipulationsService__WEBPACK_IMPORTED_MODULE_1__.GoogleMeetDOMManipulationsService.name);
    var MediaService = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _core_dependencyContainer_dependencyContainer__WEBPACK_IMPORTED_MODULE_3__["default"].getService(_secondaryServices_googleMeetMediaService__WEBPACK_IMPORTED_MODULE_2__.GoogleMeetMediaService.name);
    var InAnyCase = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : _core_dependencyContainer_dependencyContainer__WEBPACK_IMPORTED_MODULE_3__["default"].getService(_controllers_inAnyCaseController__WEBPACK_IMPORTED_MODULE_4__.InAnyCaseController.name);
    var HasNotStarted = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : _core_dependencyContainer_dependencyContainer__WEBPACK_IMPORTED_MODULE_3__["default"].getService(_controllers_meetNotStartedController__WEBPACK_IMPORTED_MODULE_5__.MeetNotStartedController.name);
    var IsTakingPlace = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : _core_dependencyContainer_dependencyContainer__WEBPACK_IMPORTED_MODULE_3__["default"].getService(_controllers_meetHappeningController__WEBPACK_IMPORTED_MODULE_6__.MeetHappeningController.name);
    _classCallCheck(this, GoogleMeetService);
    this.DOMManipulationService = DOMManipulationService;
    this.MediaService = MediaService;
    this.InAnyCase = InAnyCase;
    this.HasNotStarted = HasNotStarted;
    this.IsTakingPlace = IsTakingPlace;
    _defineProperty(this, "controllers", {
      onMeetWindow: false
    });
    _defineProperty(this, "DOMNodesId", {
      miniVideoId: 'mini-video'
    });
    _defineProperty(this, "recordParams", {
      scaleTranslationBlock: false
    });
    _defineProperty(this, "conditionParams", {
      isMeeting: false
    });
    _defineProperty(this, "observerTargetNode", document.body);
    _defineProperty(this, "observerConfig", {
      childList: true,
      subtree: true
    });
    _defineProperty(this, "observer", new MutationObserver(function () {
      var _this$queryDOMElement = _this.queryDOMElements(),
        belowBlockBtnExtMeeting = _this$queryDOMElement.belowBlockBtnExtMeeting,
        sharedScreen = _this$queryDOMElement.sharedScreen,
        sharingNotice = _this$queryDOMElement.sharingNotice,
        recordButton = _this$queryDOMElement.recordButton,
        redButton = _this$queryDOMElement.redButton,
        goMessage = _this$queryDOMElement.goMessage;
      var _this$InAnyCase$execu = _this.InAnyCase.executingInAnyCase(),
        meetingsData = _this$InAnyCase$execu.meetingsData,
        currentMeetingTitle = _this$InAnyCase$execu.currentMeetingTitle,
        rules = _this$InAnyCase$execu.rules,
        previousPartyQty = _this$InAnyCase$execu.previousPartyQty,
        disableFeatures = _this$InAnyCase$execu.disableFeatures;
      console.log(currentMeetingTitle, " - Is meeting: ".concat(_this.conditionParams.isMeeting));
      var _this$HasNotStarted$b = _this.HasNotStarted.beforeStart({
          belowBlockBtnExtMeeting: belowBlockBtnExtMeeting,
          rules: rules,
          meetingsData: meetingsData,
          isMeeting: _this.conditionParams.isMeeting,
          onMeetWindow: _this.controllers.onMeetWindow
        }),
        isMeeting = _this$HasNotStarted$b.isMeeting;
      _this.conditionParams.isMeeting = isMeeting;
      var wrapper = (0,_core_decorators_ServiceDecorator__WEBPACK_IMPORTED_MODULE_0__.DisableFeatures)({
        method: _this.IsTakingPlace.meetingHasStartedAndItIsHappening,
        features: disableFeatures === null || disableFeatures === void 0 ? void 0 : disableFeatures.meetService,
        link: _this.IsTakingPlace
      });
      var _wrapper = wrapper({
          belowBlockBtnExtMeeting: belowBlockBtnExtMeeting,
          goMessage: goMessage,
          recordButton: recordButton,
          redButton: redButton,
          sharedScreen: sharedScreen,
          sharingNotice: sharingNotice,
          isMeeting: isMeeting,
          previousPartyQty: previousPartyQty,
          rules: rules,
          currentMeetingTitle: currentMeetingTitle,
          meetingsData: meetingsData
        }),
        onMeetWindow = _wrapper.onMeetWindow,
        scaleTranslationBlock = _wrapper.scaleTranslationBlock;
      _this.controllers.onMeetWindow = onMeetWindow;
      _this.recordParams.scaleTranslationBlock = scaleTranslationBlock;
    }));
  }
  _createClass(GoogleMeetService, [{
    key: "queryDOMElements",
    value: function queryDOMElements() {
      var goMessage = Array.from(document.getElementsByClassName("VfPpkd-gIZMF"));
      var redButton = document.querySelector('[jsname="CQylAd"]');
      var sharingNotice = document.getElementsByClassName("H0YpEc")[0];
      var belowBlockBtnExtMeeting = document.querySelector('[jsaction="rcuQ6b:Rayp9d;UNIyxe:JJR6ye"]'); // this block exists on meeting page during conversation
      var sharedScreenPeers = document.getElementsByClassName("P245vb");
      var sharedScreen = sharedScreenPeers && sharedScreenPeers.length > 1 && sharedScreenPeers[0];
      var recordButton = belowBlockBtnExtMeeting === null || belowBlockBtnExtMeeting === void 0 ? void 0 : belowBlockBtnExtMeeting.querySelector('#record-button');
      return {
        goMessage: goMessage,
        redButton: redButton,
        sharingNotice: sharingNotice,
        belowBlockBtnExtMeeting: belowBlockBtnExtMeeting,
        sharedScreen: sharedScreen,
        recordButton: recordButton
      };
    }
  }, {
    key: "register",
    value: function register() {
      var _this2 = this;
      document.body.addEventListener('dblclick', function (e) {
        if (_this2.recordParams.scaleTranslationBlock && e.target.id === _this2.DOMNodesId.miniVideoId) {
          _this2.DOMManipulationService.controlBlockTranslationShow(_this2.MediaService.localeTranslation.id);
        }
      });
      document.body.addEventListener('dblclick', function (e) {
        if (_this2.recordParams.scaleTranslationBlock && e.target.id === _this2.MediaService.localeTranslation.id) {
          _this2.DOMManipulationService.controlBlockTranslationHide(_this2.MediaService.localeTranslation.id);
        }
      });
    }
  }, {
    key: "runObserve",
    value: function runObserve() {
      return this.observer.observe(this.observerTargetNode, this.observerConfig);
    }
  }]);
  return GoogleMeetService;
}()) || _class;

/***/ }),

/***/ "./src/modules/googleMeetModule/services/secondaryServices/googleMeetConditionService.ts":
/*!***********************************************************************************************!*\
  !*** ./src/modules/googleMeetModule/services/secondaryServices/googleMeetConditionService.ts ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   GoogleMeetConditionService: () => (/* binding */ GoogleMeetConditionService)
/* harmony export */ });
/* harmony import */ var _googleMeetUtilsService__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./googleMeetUtilsService */ "./src/modules/googleMeetModule/services/secondaryServices/googleMeetUtilsService.ts");
/* harmony import */ var _core_decorators_ServiceDecorator__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../core/decorators/ServiceDecorator */ "./src/core/decorators/ServiceDecorator.ts");
/* harmony import */ var _core_dependencyContainer_dependencyContainer__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../core/dependencyContainer/dependencyContainer */ "./src/core/dependencyContainer/dependencyContainer.ts");
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
var _class;
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }



var GoogleMeetConditionService = (0,_core_decorators_ServiceDecorator__WEBPACK_IMPORTED_MODULE_1__.ServiceDecorator)(_class = /*#__PURE__*/function () {
  function GoogleMeetConditionService() {
    var _this = this;
    var UtilsService = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _core_dependencyContainer_dependencyContainer__WEBPACK_IMPORTED_MODULE_2__["default"].getService(_googleMeetUtilsService__WEBPACK_IMPORTED_MODULE_0__.GoogleMeetUtilsService.name);
    _classCallCheck(this, GoogleMeetConditionService);
    this.UtilsService = UtilsService;
    // ------------------------- exit rules ---------------------------
    _defineProperty(this, "checkIfAlone", function (party) {
      return (party === null || party === void 0 ? void 0 : party.length) === 1;
    });
    _defineProperty(this, "checkIfAloneAndScreenSharing", function (party) {
      return (party === null || party === void 0 ? void 0 : party.length) === 2 && party[0].includes(party[1]);
    });
    _defineProperty(this, "exitMeeting", function (redButton, party, exitConfigList, isMeeting, controller) {
      var role = _this.UtilsService.myRole(exitConfigList);
      if (role === 'lead' && party.length !== 2) return;
      if ((party === null || party === void 0 ? void 0 : party.length) === 2 && _this.conditionForTwoLeads(exitConfigList, party)) return;
      setTimeout(function () {
        if (controller < 1 && isMeeting) {
          controller++;
          redButton.click();
          setTimeout(function () {
            var terminalButton = document.getElementsByClassName("VfPpkd-LgbsSe")[2];
            controller = 0;
            isMeeting = false;
            terminalButton.click();
          }, 1000);
        }
      }, 1000);
    });
  }
  _createClass(GoogleMeetConditionService, [{
    key: "conditionForTwoLeads",
    value: function conditionForTwoLeads(exitConfigList, party) {
      var _this2 = this;
      if (!exitConfigList) return;
      var _this$UtilsService$le = this.UtilsService.leadsNotLeads(exitConfigList),
        leads = _this$UtilsService$le.leads;
      var qtyOfLeads = party.filter(function (p) {
        return leads.includes(_this2.UtilsService.leadToGeneral(p));
      }).length;
      return qtyOfLeads === 2;
    }
  }, {
    key: "leaveWithMyFriendsHandle",
    value: function leaveWithMyFriendsHandle(meetingsData, rules, party) {
      if (!meetingsData) return console.warn('Data is loading');
      if (!rules.leaveTogetherWithMyGuys.isTurnOn) return;
      var friendsInMeetingCurrent = rules.leaveTogetherWithMyGuys.guys.filter(function (f) {
        return !!party.find(function (p) {
          return p === f;
        });
      }).length;
      var friendsInMeeting = rules.leaveTogetherWithMyGuys.guys.length;
      var leaveWhen = rules.leaveTogetherWithMyGuys.leaveWhen;
      return leaveWhen === 'all' ? friendsInMeetingCurrent === 0 : leaveWhen === 'one' ? friendsInMeetingCurrent <= 1 : friendsInMeetingCurrent <= friendsInMeeting * Number.parseInt(leaveWhen) / 100;
    }
  }]);
  return GoogleMeetConditionService;
}()) || _class;

/***/ }),

/***/ "./src/modules/googleMeetModule/services/secondaryServices/googleMeetDOMManipulationsService.ts":
/*!******************************************************************************************************!*\
  !*** ./src/modules/googleMeetModule/services/secondaryServices/googleMeetDOMManipulationsService.ts ***!
  \******************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   GoogleMeetDOMManipulationsService: () => (/* binding */ GoogleMeetDOMManipulationsService)
/* harmony export */ });
/* harmony import */ var _googleMeetUtilsService__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./googleMeetUtilsService */ "./src/modules/googleMeetModule/services/secondaryServices/googleMeetUtilsService.ts");
/* harmony import */ var _core_decorators_ServiceDecorator__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../core/decorators/ServiceDecorator */ "./src/core/decorators/ServiceDecorator.ts");
/* harmony import */ var _core_dependencyContainer_dependencyContainer__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../core/dependencyContainer/dependencyContainer */ "./src/core/dependencyContainer/dependencyContainer.ts");
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
var _class;
function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, defineProperty = Object.defineProperty || function (obj, key, desc) { obj[key] = desc.value; }, $Symbol = "function" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || "@@iterator", asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator", toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, ""); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return defineProperty(generator, "_invoke", { value: makeInvokeMethod(innerFn, self, context) }), generator; } function tryCatch(fn, obj, arg) { try { return { type: "normal", arg: fn.call(obj, arg) }; } catch (err) { return { type: "throw", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { ["next", "throw", "return"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if ("throw" !== record.type) { var result = record.arg, value = result.value; return value && "object" == _typeof(value) && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke("next", value, resolve, reject); }, function (err) { invoke("throw", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke("throw", error, resolve, reject); }); } reject(record.arg); } var previousPromise; defineProperty(this, "_invoke", { value: function value(method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(innerFn, self, context) { var state = "suspendedStart"; return function (method, arg) { if ("executing" === state) throw new Error("Generator is already running"); if ("completed" === state) { if ("throw" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) { if ("suspendedStart" === state) throw state = "completed", context.arg; context.dispatchException(context.arg); } else "return" === context.method && context.abrupt("return", context.arg); state = "executing"; var record = tryCatch(innerFn, self, context); if ("normal" === record.type) { if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg); } }; } function maybeInvokeDelegate(delegate, context) { var methodName = context.method, method = delegate.iterator[methodName]; if (undefined === method) return context.delegate = null, "throw" === methodName && delegate.iterator["return"] && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method) || "return" !== methodName && (context.method = "throw", context.arg = new TypeError("The iterator does not provide a '" + methodName + "' method")), ContinueSentinel; var record = tryCatch(method, delegate.iterator, context.arg); if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = "normal", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: "root" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if ("function" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, defineProperty(Gp, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), defineProperty(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) { var ctor = "function" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, "toString", function () { return "[object Generator]"; }), exports.keys = function (val) { var object = Object(val), keys = []; for (var key in object) keys.push(key); return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if ("throw" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if ("root" === entry.tryLoc) return handle("end"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, "catchLoc"), hasFinally = hasOwn.call(entry, "finallyLoc"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error("try statement without catch or finally"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if ("throw" === record.type) throw record.arg; return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, "catch": function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if ("throw" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error("illegal catch attempt"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, "next" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }
function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }



var GoogleMeetDOMManipulationsService = (0,_core_decorators_ServiceDecorator__WEBPACK_IMPORTED_MODULE_1__.ServiceDecorator)(_class = /*#__PURE__*/function () {
  function GoogleMeetDOMManipulationsService() {
    var _this = this;
    var UtilsService = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _core_dependencyContainer_dependencyContainer__WEBPACK_IMPORTED_MODULE_2__["default"].getService(_googleMeetUtilsService__WEBPACK_IMPORTED_MODULE_0__.GoogleMeetUtilsService.name);
    _classCallCheck(this, GoogleMeetDOMManipulationsService);
    this.UtilsService = UtilsService;
    _defineProperty(this, "outerControllerID", 'outer-controller-camera');
    _defineProperty(this, "outerStyles", _defineProperty({
      position: 'absolute',
      top: 0,
      left: 0
    }, 'z-index', 1000));
    _defineProperty(this, "conditionParams", {
      isCameraHandleRunning: false
    });
    _defineProperty(this, "manageSubtitles", function () {
      var subtitles = document.querySelector('[jsaction="TpIHXe:c0270d;v2nhid:YHhXNc;kDAVge:lUFH9b;Z1rKi:s4fYDc;OoZzdf:s4fYDc"]');
      if (subtitles) {
        // const sharedScreen = document.querySelectorAll('.tTdl5d')[0]
        // const mainScreenBlock: HTMLDivElement = document.querySelector('[jsaction="rcuQ6b:NCu6M; contextmenu:gg8MLb;z5KiKd:qIXZdc;EnKPre:eGjA6d"]')
        //
        // subtitles.style.position = 'absolute'
        // subtitles.style.top = window.getComputedStyle(sharedScreen).top
        // mainScreenBlock.style.height += subtitles.style.height
        return true;
      }
      return false;
    });
    _defineProperty(this, "disableCamera", /*#__PURE__*/function () {
      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(belowSectionWithBtnExtMeet) {
        var isCameraOff, centerBlock, camera, cameraBtn, cameraUI, className, isCameraOn;
        return _regeneratorRuntime().wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              isCameraOff = false;
              centerBlock = belowSectionWithBtnExtMeet === null || belowSectionWithBtnExtMeet === void 0 ? void 0 : belowSectionWithBtnExtMeet.querySelector('[jsname="vNB5le"]');
              camera = centerBlock === null || centerBlock === void 0 ? void 0 : centerBlock.querySelector('div').children[1];
              cameraBtn = camera === null || camera === void 0 ? void 0 : camera.querySelector('span button');
              cameraUI = cameraBtn === null || cameraBtn === void 0 ? void 0 : cameraBtn.querySelectorAll('div')[2];
              className = cameraUI === null || cameraUI === void 0 ? void 0 : cameraUI.getAttribute('class');
              isCameraOn = className === null || className === void 0 ? void 0 : className.includes('HotEze');
              if (isCameraOn) {
                _this.UtilsService.delay(function () {
                  return cameraBtn.click();
                }, 0);
                _this.UtilsService.delay(function () {
                  return cameraBtn.disabled = true;
                }, 0);
                isCameraOff = true;
                _this.UtilsService.delay(function () {
                  return _this.outerTurningOverCameraBtn(cameraBtn);
                }, 0);
                _this.UtilsService.delay(function () {
                  return _this.turnOnOffCameraHandle(cameraBtn);
                }, 0);
              }
              return _context.abrupt("return", {
                isCameraOff: isCameraOff,
                cameraUI: cameraUI,
                cameraBtn: cameraBtn
              });
            case 9:
            case "end":
              return _context.stop();
          }
        }, _callee);
      }));
      return function (_x) {
        return _ref.apply(this, arguments);
      };
    }());
    _defineProperty(this, "turnOnOffCameraHandle", function (cameraBtn) {
      if (_this.conditionParams.isCameraHandleRunning) return;
      _this.conditionParams.isCameraHandleRunning = true;
      var outer = document.querySelector("#".concat(_this.outerControllerID));
      cameraBtn && _this.UtilsService.handleManyClick(outer, 3, /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {
        return _regeneratorRuntime().wrap(function _callee2$(_context2) {
          while (1) switch (_context2.prev = _context2.next) {
            case 0:
              _this.UtilsService.delay(function () {
                return cameraBtn.disabled = false;
              }, 0);
              _this.UtilsService.delay(function () {
                return cameraBtn.click();
              }, 0);
              _this.UtilsService.delay(function () {
                return cameraBtn.disabled = true;
              }, 0);
            case 3:
            case "end":
              return _context2.stop();
          }
        }, _callee2);
      })));
      _this.UtilsService.delay(function () {
        return _this.conditionParams.isCameraHandleRunning = false;
      }, 100);
    });
    _defineProperty(this, "outerTurningOverCameraBtn", function (cameraBtn) {
      var outer = document.querySelector("#".concat(_this.outerControllerID));
      if (outer) return;
      var cameraStyle = window.getComputedStyle(cameraBtn);
      var size = {
        width: cameraStyle.getPropertyValue('width'),
        height: cameraStyle.getPropertyValue('height')
      };
      var styles = Object.assign(_this.outerStyles, size);
      var template = document.createElement('div');
      template.id = _this.outerControllerID;
      template.style.cssText = _this.UtilsService.stylesHandle(styles);
      cameraBtn.style.position = 'relative';
      cameraBtn.appendChild(template);
    });
  }
  _createClass(GoogleMeetDOMManipulationsService, [{
    key: "controlBlockTranslationShow",
    value: function controlBlockTranslationShow(id) {
      var block = document.querySelector("#".concat(id));
      block.style.cssText = "z-index: 1002; opacity: 1; transition: 1s ease-in-out; position: absolute;";
    }
  }, {
    key: "controlBlockTranslationHide",
    value: function controlBlockTranslationHide(id) {
      var block = document.querySelector("#".concat(id));
      block.style.cssText = "z-index: -1; opacity: 0; transition: 1s ease-in-out; position: absolute;";
    }
  }, {
    key: "createRecordButton",
    value: function createRecordButton(belowBlockBtnExtMeeting) {
      var _belowBlockBtnExtMeet;
      var recordButton = document.createElement('button');
      recordButton.setAttribute('id', 'record-button');
      (_belowBlockBtnExtMeet = belowBlockBtnExtMeeting.childNodes[1]) === null || _belowBlockBtnExtMeet === void 0 || (_belowBlockBtnExtMeet = _belowBlockBtnExtMeet.querySelector('div')) === null || _belowBlockBtnExtMeet === void 0 ? void 0 : _belowBlockBtnExtMeet.prepend(recordButton);
      recordButton.setAttribute('class', 'VfPpkd-Bz112c-LgbsSe yHy1rc eT1oJ tWDL4c uaILN');
      recordButton.style.cssText = 'display: flex; align-items: center; justify-content: center;';
      var span = document.createElement('span');
      span.style.cssText = 'display: block; width: 8px; height: 8px; background: red; border: 1px solid rgba(255,0,0,0.8); border-radius: 50%;';
      recordButton.appendChild(span);
      return recordButton;
    }
  }]);
  return GoogleMeetDOMManipulationsService;
}()) || _class;

/***/ }),

/***/ "./src/modules/googleMeetModule/services/secondaryServices/googleMeetDateService.ts":
/*!******************************************************************************************!*\
  !*** ./src/modules/googleMeetModule/services/secondaryServices/googleMeetDateService.ts ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   GoogleMeetDateService: () => (/* binding */ GoogleMeetDateService)
/* harmony export */ });
/* harmony import */ var _core_decorators_ServiceDecorator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../core/decorators/ServiceDecorator */ "./src/core/decorators/ServiceDecorator.ts");
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
var _class;
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _iterableToArrayLimit(arr, i) { var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"]; if (null != _i) { var _s, _e, _x, _r, _arr = [], _n = !0, _d = !1; try { if (_x = (_i = _i.call(arr)).next, 0 === i) { if (Object(_i) !== _i) return; _n = !1; } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0); } catch (err) { _d = !0, _e = err; } finally { try { if (!_n && null != _i["return"] && (_r = _i["return"](), Object(_r) !== _r)) return; } finally { if (_d) throw _e; } } return _arr; } }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }

var GoogleMeetDateService = (0,_core_decorators_ServiceDecorator__WEBPACK_IMPORTED_MODULE_0__.ServiceDecorator)(_class = /*#__PURE__*/function () {
  function GoogleMeetDateService() {
    _classCallCheck(this, GoogleMeetDateService);
  }
  _createClass(GoogleMeetDateService, [{
    key: "getLocaleTime",
    value: function getLocaleTime(time) {
      var toLocaleString = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
      if (!time) return new Date().toLocaleString(undefined, {
        year: "numeric",
        month: "numeric",
        hour: 'numeric',
        minute: 'numeric'
      });
      var dateTimeFormat = new Intl.DateTimeFormat();
      var _dateTimeFormat$resol = dateTimeFormat.resolvedOptions(),
        timeZone = _dateTimeFormat$resol.timeZone;
      var _time$split = time.split(":"),
        _time$split2 = _slicedToArray(_time$split, 2),
        hours = _time$split2[0],
        minutes = _time$split2[1];
      var currentDate = new Date();
      return toLocaleString ? new Date(currentDate.getFullYear(), currentDate.getMonth(), currentDate.getDate(), hours, minutes).toLocaleString(undefined, {
        year: "numeric",
        month: "numeric",
        hour: 'numeric',
        minute: 'numeric',
        timeZone: timeZone
      }) : new Date(currentDate.getFullYear(), currentDate.getMonth(), currentDate.getDate(), hours, minutes);
    }
  }]);
  return GoogleMeetDateService;
}()) || _class;

/***/ }),

/***/ "./src/modules/googleMeetModule/services/secondaryServices/googleMeetEventRuleService.ts":
/*!***********************************************************************************************!*\
  !*** ./src/modules/googleMeetModule/services/secondaryServices/googleMeetEventRuleService.ts ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   GoogleMeetEventRuleService: () => (/* binding */ GoogleMeetEventRuleService)
/* harmony export */ });
/* harmony import */ var _googleMeetUtilsService__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./googleMeetUtilsService */ "./src/modules/googleMeetModule/services/secondaryServices/googleMeetUtilsService.ts");
/* harmony import */ var _core_decorators_ServiceDecorator__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../core/decorators/ServiceDecorator */ "./src/core/decorators/ServiceDecorator.ts");
/* harmony import */ var _core_dependencyContainer_dependencyContainer__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../core/dependencyContainer/dependencyContainer */ "./src/core/dependencyContainer/dependencyContainer.ts");
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
var _class;
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }



var GoogleMeetEventRuleService = (0,_core_decorators_ServiceDecorator__WEBPACK_IMPORTED_MODULE_1__.ServiceDecorator)(_class = /*#__PURE__*/_createClass(function GoogleMeetEventRuleService() {
  var _this = this;
  var UtilsService = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _core_dependencyContainer_dependencyContainer__WEBPACK_IMPORTED_MODULE_2__["default"].getService(_googleMeetUtilsService__WEBPACK_IMPORTED_MODULE_0__.GoogleMeetUtilsService.name);
  _classCallCheck(this, GoogleMeetEventRuleService);
  this.UtilsService = UtilsService;
  _defineProperty(this, "checkIfConfigRule", function (title, exitConfigList, guests, party, percentageToLeave) {
    if (!exitConfigList) {
      return false;
    }
    // not leads has left more than 73%
    if (title === 'Daily meet up') return _this.dailyMeetUpRule(title, exitConfigList, guests, party, percentageToLeave);

    // not participants from the required list
    if (title === 'Refinement call') return _this.refinementCallRule(title, exitConfigList, party);
  });
  _defineProperty(this, "dailyMeetUpRule", function (title, list, guests, party, percentageToLeave) {
    var _this$UtilsService$le = _this.UtilsService.leadsNotLeads(list),
      notLeads = _this$UtilsService$le.notLeads,
      leads = _this$UtilsService$le.leads;
    var guestQty = guests.length;
    var maxRegisterNotLeads = notLeads.length + guestQty;
    var currentNoLeads = party.filter(function (p) {
      return !leads.includes(_this.UtilsService.leadToGeneral(p));
    }).length;
    return currentNoLeads / maxRegisterNotLeads < 1 - percentageToLeave; // Share of current not lead participants from register
  });
  _defineProperty(this, "refinementCallRule", function (title, list, party) {
    return !list.filter(function (item) {
      return party.join(' ').includes(item.participantName);
    }).length;
  });
})) || _class;

/***/ }),

/***/ "./src/modules/googleMeetModule/services/secondaryServices/googleMeetFullScreenService.ts":
/*!************************************************************************************************!*\
  !*** ./src/modules/googleMeetModule/services/secondaryServices/googleMeetFullScreenService.ts ***!
  \************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   GoogleMeetFullScreenService: () => (/* binding */ GoogleMeetFullScreenService)
/* harmony export */ });
/* harmony import */ var _core_decorators_ServiceDecorator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../core/decorators/ServiceDecorator */ "./src/core/decorators/ServiceDecorator.ts");
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
var _class;
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }

var GoogleMeetFullScreenService = (0,_core_decorators_ServiceDecorator__WEBPACK_IMPORTED_MODULE_0__.ServiceDecorator)(_class = /*#__PURE__*/_createClass(function GoogleMeetFullScreenService() {
  var _this = this;
  _classCallCheck(this, GoogleMeetFullScreenService);
  _defineProperty(this, "enterFullScreenForParticipant", function (isFullScreenEnabled, exitFullScreen) {
    if (!isFullScreenEnabled && !exitFullScreen) {
      chrome.runtime.sendMessage({
        action: 'enterFullScreen'
      });
      return {
        isFullScreenEnabledAfter: true
      };
    }
  });
  _defineProperty(this, "checkScreenSharing", function (sharedScreen, isScreenSharingActive, isFullScreenEnabled, exitFullScreen) {
    if (sharedScreen && !isScreenSharingActive) {
      var _this$enterFullScreen = _this.enterFullScreenForParticipant(isFullScreenEnabled, exitFullScreen),
        isFullScreenEnabledAfter = _this$enterFullScreen.isFullScreenEnabledAfter;
      return {
        isScreenSharingActive: true,
        isFullScreenEnabled: isFullScreenEnabledAfter
      };
    }
  });
})) || _class;

/***/ }),

/***/ "./src/modules/googleMeetModule/services/secondaryServices/googleMeetMainFunctionsService.ts":
/*!***************************************************************************************************!*\
  !*** ./src/modules/googleMeetModule/services/secondaryServices/googleMeetMainFunctionsService.ts ***!
  \***************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   GoogleMeetMainFunctionsService: () => (/* binding */ GoogleMeetMainFunctionsService)
/* harmony export */ });
/* harmony import */ var _googleMeetUtilsService__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./googleMeetUtilsService */ "./src/modules/googleMeetModule/services/secondaryServices/googleMeetUtilsService.ts");
/* harmony import */ var _googleMeetDateService__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./googleMeetDateService */ "./src/modules/googleMeetModule/services/secondaryServices/googleMeetDateService.ts");
/* harmony import */ var _core_decorators_ServiceDecorator__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../core/decorators/ServiceDecorator */ "./src/core/decorators/ServiceDecorator.ts");
/* harmony import */ var _core_dependencyContainer_dependencyContainer__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../../core/dependencyContainer/dependencyContainer */ "./src/core/dependencyContainer/dependencyContainer.ts");
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
var _class;
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }




var GoogleMeetMainFunctionsService = (0,_core_decorators_ServiceDecorator__WEBPACK_IMPORTED_MODULE_2__.ServiceDecorator)(_class = /*#__PURE__*/_createClass(function GoogleMeetMainFunctionsService() {
  var _this = this;
  var UtilsService = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _core_dependencyContainer_dependencyContainer__WEBPACK_IMPORTED_MODULE_3__["default"].getService(_googleMeetUtilsService__WEBPACK_IMPORTED_MODULE_0__.GoogleMeetUtilsService.name);
  var DateService = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _core_dependencyContainer_dependencyContainer__WEBPACK_IMPORTED_MODULE_3__["default"].getService(_googleMeetDateService__WEBPACK_IMPORTED_MODULE_1__.GoogleMeetDateService.name);
  _classCallCheck(this, GoogleMeetMainFunctionsService);
  this.UtilsService = UtilsService;
  this.DateService = DateService;
  _defineProperty(this, "getParty", function () {
    var teammateNames = [];
    // more than 3s participation
    teammateNames = Array.from(document.getElementsByClassName("XEazBc"));
    var checkLayout = document.querySelector('[jsname="jrQDbd"]');
    if (checkLayout) {
      teammateNames = Array.from(document.getElementsByClassName("jKwXVe"));
    }
    return !teammateNames.length ? teammateNames : teammateNames.map(function (item) {
      return item.outerText;
    });
  });
  _defineProperty(this, "guestsHandler", function (exitConfigList, party) {
    if (!exitConfigList) return;
    var participants = exitConfigList.map(function (obj) {
      return obj.participantName;
    });
    return party.filter(function (p) {
      return !participants.includes(_this.UtilsService.leadToGeneral(p));
    }).map(function (p) {
      return _this.UtilsService.leadToGeneral(p);
    });
  });
  _defineProperty(this, "getMeetTopic", function (meetingsData) {
    if (!meetingsData) return;
    var startTimes = Object.keys(meetingsData.googlemeetRules);
    var localeCurrentDate = new Date();
    var nextDayTime = new Date();
    nextDayTime.setDate(nextDayTime.getDate() + 1);
    var currentMeetingTopic = 'Topic is absent';
    for (var i = 0; i < startTimes.length; i++) {
      var firstMeetTime = _this.DateService.getLocaleTime(startTimes[0], false);
      var secondMeetTime = _this.DateService.getLocaleTime(startTimes[1], false);
      var currentTime = _this.DateService.getLocaleTime(startTimes[i], false);
      var nextTime = !startTimes[i + 1] ? null : _this.DateService.getLocaleTime(startTimes[i + 1]);
      if (localeCurrentDate >= nextTime) continue;
      if (localeCurrentDate >= currentTime && (localeCurrentDate < nextTime || !nextTime)) {
        var time = _this.UtilsService.convertTimeWithZero(currentTime);
        currentMeetingTopic = meetingsData.googlemeetRules[time].title;
      } else if (nextDayTime > currentTime && localeCurrentDate > firstMeetTime && localeCurrentDate < secondMeetTime) {
        var firstMeetKey = startTimes[0];
        currentMeetingTopic = meetingsData.googlemeetRules[firstMeetKey].title;
      } else {
        var lastMeetKey = startTimes[startTimes.length - 1];
        currentMeetingTopic = meetingsData.googlemeetRules[lastMeetKey].title;
      }
    }
    return currentMeetingTopic;
  });
})) || _class;

/***/ }),

/***/ "./src/modules/googleMeetModule/services/secondaryServices/googleMeetMediaService.ts":
/*!*******************************************************************************************!*\
  !*** ./src/modules/googleMeetModule/services/secondaryServices/googleMeetMediaService.ts ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   GoogleMeetMediaService: () => (/* binding */ GoogleMeetMediaService)
/* harmony export */ });
/* harmony import */ var _googleMeetUtilsService__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./googleMeetUtilsService */ "./src/modules/googleMeetModule/services/secondaryServices/googleMeetUtilsService.ts");
/* harmony import */ var _intermediaryServices_intermediaryService__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../intermediaryServices/intermediaryService */ "./src/modules/intermediaryServices/intermediaryService.ts");
/* harmony import */ var _core_decorators_ServiceDecorator__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../core/decorators/ServiceDecorator */ "./src/core/decorators/ServiceDecorator.ts");
/* harmony import */ var _core_dependencyContainer_dependencyContainer__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../../core/dependencyContainer/dependencyContainer */ "./src/core/dependencyContainer/dependencyContainer.ts");
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
var _class;
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _iterableToArrayLimit(arr, i) { var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"]; if (null != _i) { var _s, _e, _x, _r, _arr = [], _n = !0, _d = !1; try { if (_x = (_i = _i.call(arr)).next, 0 === i) { if (Object(_i) !== _i) return; _n = !1; } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0); } catch (err) { _d = !0, _e = err; } finally { try { if (!_n && null != _i["return"] && (_r = _i["return"](), Object(_r) !== _r)) return; } finally { if (_d) throw _e; } } return _arr; } }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, defineProperty = Object.defineProperty || function (obj, key, desc) { obj[key] = desc.value; }, $Symbol = "function" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || "@@iterator", asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator", toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, ""); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return defineProperty(generator, "_invoke", { value: makeInvokeMethod(innerFn, self, context) }), generator; } function tryCatch(fn, obj, arg) { try { return { type: "normal", arg: fn.call(obj, arg) }; } catch (err) { return { type: "throw", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { ["next", "throw", "return"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if ("throw" !== record.type) { var result = record.arg, value = result.value; return value && "object" == _typeof(value) && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke("next", value, resolve, reject); }, function (err) { invoke("throw", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke("throw", error, resolve, reject); }); } reject(record.arg); } var previousPromise; defineProperty(this, "_invoke", { value: function value(method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(innerFn, self, context) { var state = "suspendedStart"; return function (method, arg) { if ("executing" === state) throw new Error("Generator is already running"); if ("completed" === state) { if ("throw" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) { if ("suspendedStart" === state) throw state = "completed", context.arg; context.dispatchException(context.arg); } else "return" === context.method && context.abrupt("return", context.arg); state = "executing"; var record = tryCatch(innerFn, self, context); if ("normal" === record.type) { if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg); } }; } function maybeInvokeDelegate(delegate, context) { var methodName = context.method, method = delegate.iterator[methodName]; if (undefined === method) return context.delegate = null, "throw" === methodName && delegate.iterator["return"] && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method) || "return" !== methodName && (context.method = "throw", context.arg = new TypeError("The iterator does not provide a '" + methodName + "' method")), ContinueSentinel; var record = tryCatch(method, delegate.iterator, context.arg); if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = "normal", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: "root" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if ("function" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, defineProperty(Gp, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), defineProperty(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) { var ctor = "function" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, "toString", function () { return "[object Generator]"; }), exports.keys = function (val) { var object = Object(val), keys = []; for (var key in object) keys.push(key); return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if ("throw" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if ("root" === entry.tryLoc) return handle("end"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, "catchLoc"), hasFinally = hasOwn.call(entry, "finallyLoc"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error("try statement without catch or finally"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if ("throw" === record.type) throw record.arg; return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, "catch": function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if ("throw" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error("illegal catch attempt"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, "next" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }
function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }




var GoogleMeetMediaService = (0,_core_decorators_ServiceDecorator__WEBPACK_IMPORTED_MODULE_2__.ServiceDecorator)(_class = /*#__PURE__*/function () {
  function GoogleMeetMediaService() {
    var UtilsService = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _core_dependencyContainer_dependencyContainer__WEBPACK_IMPORTED_MODULE_3__["default"].getService(_googleMeetUtilsService__WEBPACK_IMPORTED_MODULE_0__.GoogleMeetUtilsService.name);
    var IntermediaryService = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _intermediaryServices_intermediaryService__WEBPACK_IMPORTED_MODULE_1__["default"];
    _classCallCheck(this, GoogleMeetMediaService);
    this.UtilsService = UtilsService;
    this.IntermediaryService = IntermediaryService;
    _defineProperty(this, "localeTranslation", {
      id: 'local-video',
      translation: null,
      autoplay: true,
      playsInline: true,
      controls: false,
      styles: _defineProperty({
        position: 'absolute',
        top: '0',
        left: '0',
        height: '100vh',
        width: '100vw',
        background: '#202124'
      }, 'z-index', 1001)
    });
    _defineProperty(this, "mediaManipulations", {
      stream: null,
      streamVideo: null,
      streamAudio: null,
      mediaRecorderVideo: null,
      mediaRecorderAudio: null,
      mediaChunks: [],
      audioChunks: []
    });
  }
  _createClass(GoogleMeetMediaService, [{
    key: "startRecording",
    value: function () {
      var _startRecording = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {
        var _this = this;
        return _regeneratorRuntime().wrap(function _callee2$(_context2) {
          while (1) switch (_context2.prev = _context2.next) {
            case 0:
              _context2.prev = 0;
              _context2.next = 3;
              return navigator.mediaDevices.getDisplayMedia({
                video: true,
                audio: true
              });
            case 3:
              this.mediaManipulations.stream = _context2.sent;
              _context2.next = 6;
              return this.recordAudio();
            case 6:
              this.mediaManipulations.mediaRecorderVideo = new MediaRecorder(this.mediaManipulations.stream);
              this.mediaManipulations.mediaRecorderVideo.onstop = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
                return _regeneratorRuntime().wrap(function _callee$(_context) {
                  while (1) switch (_context.prev = _context.next) {
                    case 0:
                      _context.next = 2;
                      return _this.sendRecordToServer();
                    case 2:
                    case "end":
                      return _context.stop();
                  }
                }, _callee);
              }));
              this.mediaManipulations.mediaRecorderVideo.ondataavailable = function (e) {
                _this.mediaManipulations.mediaChunks.push(e.data);
                console.log('Data available:', e.data);
              };
              this.mediaManipulations.mediaRecorderVideo.start();
              _context2.next = 15;
              break;
            case 12:
              _context2.prev = 12;
              _context2.t0 = _context2["catch"](0);
              console.error(_context2.t0);
            case 15:
            case "end":
              return _context2.stop();
          }
        }, _callee2, this, [[0, 12]]);
      }));
      function startRecording() {
        return _startRecording.apply(this, arguments);
      }
      return startRecording;
    }()
  }, {
    key: "stopRecording",
    value: function stopRecording() {
      if (this.mediaManipulations.mediaRecorderVideo) {
        this.mediaManipulations.mediaRecorderVideo.stop();
        this.mediaManipulations.mediaRecorderAudio.stop();
        this.releaseResources();
      }
    }
  }, {
    key: "scaleNewTranslationBlock",
    value: function scaleNewTranslationBlock(video) {
      var _this2 = this;
      this.mediaManipulations.streamVideo = video.captureStream();
      this.localeTranslation.translation = document.createElement('video');
      console.log(this.localeTranslation.translation, ' ------------------------------ > translation !');
      Object.entries(this.localeTranslation).forEach(function (_ref2) {
        var _ref3 = _slicedToArray(_ref2, 2),
          name = _ref3[0],
          value = _ref3[1];
        return name !== 'styles' && (_this2.localeTranslation.translation[name] = value);
      });
      this.localeTranslation.translation.style.cssText = this.UtilsService.stylesHandle(this.localeTranslation.styles);
      document.body.appendChild(this.localeTranslation.translation);
      _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {
        return _regeneratorRuntime().wrap(function _callee3$(_context3) {
          while (1) switch (_context3.prev = _context3.next) {
            case 0:
              _context3.next = 2;
              return _this2.catchingTranslation();
            case 2:
              return _context3.abrupt("return", _context3.sent);
            case 3:
            case "end":
              return _context3.stop();
          }
        }, _callee3);
      }))();
    }
  }, {
    key: "deleteLocalTranslationBlock",
    value: function deleteLocalTranslationBlock() {
      if (this.localeTranslation.translation) {
        this.localeTranslation.translation.remove();
      }
    }

    // need to implement logic of capturing screen sharing of other participants (need to select a video which is being played during meeting by one of the meet participants). Implementation has to be run in main service
  }, {
    key: "catchingTranslation",
    value: function () {
      var _catchingTranslation = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {
        return _regeneratorRuntime().wrap(function _callee4$(_context4) {
          while (1) switch (_context4.prev = _context4.next) {
            case 0:
              try {
                this.localeTranslation.translation.srcObject = this.mediaManipulations.streamVideo;
              } catch (e) {
                console.error('Error catching translation', e);
              }
            case 1:
            case "end":
              return _context4.stop();
          }
        }, _callee4, this);
      }));
      function catchingTranslation() {
        return _catchingTranslation.apply(this, arguments);
      }
      return catchingTranslation;
    }() // need to change recording audio tags to logic of recording extension user microphone via getUserMedia
  }, {
    key: "recordAudio",
    value: function () {
      var _recordAudio = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6() {
        var _this3 = this;
        var audioTags, audioStreams;
        return _regeneratorRuntime().wrap(function _callee6$(_context6) {
          while (1) switch (_context6.prev = _context6.next) {
            case 0:
              try {
                audioTags = Array.from(document.querySelectorAll('audio'));
                audioStreams = audioTags.map(function (audioStream) {
                  return audioStream.captureStream();
                });
                this.mediaManipulations.streamAudio = new MediaStream();
                audioStreams.forEach(function (audioStream) {
                  audioStream.getAudioTracks().forEach(function (track) {
                    _this3.mediaManipulations.streamAudio.addTrack(track);
                  });
                });
                this.mediaManipulations.mediaRecorderAudio = new MediaRecorder(this.mediaManipulations.streamAudio);
                this.mediaManipulations.mediaRecorderAudio.onstop = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5() {
                  return _regeneratorRuntime().wrap(function _callee5$(_context5) {
                    while (1) switch (_context5.prev = _context5.next) {
                      case 0:
                        _context5.next = 2;
                        return _this3.sendAudioToServer();
                      case 2:
                      case "end":
                        return _context5.stop();
                    }
                  }, _callee5);
                }));
                this.mediaManipulations.mediaRecorderAudio.ondataavailable = function (e) {
                  _this3.mediaManipulations.audioChunks.push(e.data);
                  console.log('Audio data available:', e.data);
                };
                this.mediaManipulations.mediaRecorderAudio.start();
              } catch (e) {
                console.error(e);
              }
            case 1:
            case "end":
              return _context6.stop();
          }
        }, _callee6, this);
      }));
      function recordAudio() {
        return _recordAudio.apply(this, arguments);
      }
      return recordAudio;
    }() // does not work as it should
  }, {
    key: "playInMicro",
    value: function () {
      var _playInMicro = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee8(name) {
        var _yield$this$Intermedi, microAudio, blobURL, audioElement;
        return _regeneratorRuntime().wrap(function _callee8$(_context8) {
          while (1) switch (_context8.prev = _context8.next) {
            case 0:
              if (!name) name = 'audio';
              _context8.prev = 1;
              _context8.next = 4;
              return this.IntermediaryService.fetchFilesService.getMicroAudio(name);
            case 4:
              _yield$this$Intermedi = _context8.sent;
              microAudio = _yield$this$Intermedi.microAudio;
              if (microAudio) {
                blobURL = URL.createObjectURL(microAudio);
                audioElement = new Audio(blobURL);
                audioElement.addEventListener('canplaythrough', /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee7() {
                  var audioStream, audioContext, microphone, audioSource, audioInput, audioTrack;
                  return _regeneratorRuntime().wrap(function _callee7$(_context7) {
                    while (1) switch (_context7.prev = _context7.next) {
                      case 0:
                        audioStream = audioElement.captureStream();
                        audioContext = new AudioContext();
                        microphone = audioContext.createMediaStreamDestination();
                        audioSource = audioContext.createMediaStreamSource(audioStream);
                        audioSource.connect(microphone);
                        _context7.next = 7;
                        return navigator.mediaDevices.getUserMedia({
                          audio: true
                        }).then(function (stream) {
                          console.log(stream, '-------------------------------- > micro is available');
                          return stream;
                        })["catch"](function (error) {
                          console.error('Error during getting micro:', error);
                        });
                      case 7:
                        audioInput = _context7.sent;
                        audioTrack = audioInput.getAudioTracks()[0];
                        audioTrack.enabled = false;
                        _context7.next = 12;
                        return audioElement.play();
                      case 12:
                        microphone.stream.getAudioTracks().forEach(function (track) {
                          console.log('Audio track data:', track);
                        });
                        audioTrack.enabled = true;
                      case 14:
                      case "end":
                        return _context7.stop();
                    }
                  }, _callee7);
                })));
              }
              _context8.next = 12;
              break;
            case 9:
              _context8.prev = 9;
              _context8.t0 = _context8["catch"](1);
              console.error(_context8.t0);
            case 12:
            case "end":
              return _context8.stop();
          }
        }, _callee8, this, [[1, 9]]);
      }));
      function playInMicro(_x2) {
        return _playInMicro.apply(this, arguments);
      }
      return playInMicro;
    }()
  }, {
    key: "sendRecordToServer",
    value: function () {
      var _sendRecordToServer = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee9() {
        var blob, formData, response;
        return _regeneratorRuntime().wrap(function _callee9$(_context9) {
          while (1) switch (_context9.prev = _context9.next) {
            case 0:
              blob = new Blob(this.mediaManipulations.mediaChunks, {
                type: 'video/mp4'
              });
              formData = new FormData();
              formData.append('video', blob, 'recorded-translation.mp4');
              _context9.prev = 3;
              _context9.next = 6;
              return fetch("".concat("MISSING_ENV_VAR".DB_HOST, "/upload-translation"), {
                method: 'POST',
                body: formData
              });
            case 6:
              response = _context9.sent;
              if (response.ok) {
                console.log('File uploaded successfully on the server.');
              } else {
                console.error('Error uploading file on the server:', response.statusText);
              }
              _context9.next = 13;
              break;
            case 10:
              _context9.prev = 10;
              _context9.t0 = _context9["catch"](3);
              console.error('Error uploading file on the server:', _context9.t0);
            case 13:
            case "end":
              return _context9.stop();
          }
        }, _callee9, this, [[3, 10]]);
      }));
      function sendRecordToServer() {
        return _sendRecordToServer.apply(this, arguments);
      }
      return sendRecordToServer;
    }()
  }, {
    key: "sendAudioToServer",
    value: function () {
      var _sendAudioToServer = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee10() {
        var blob, formData, response;
        return _regeneratorRuntime().wrap(function _callee10$(_context10) {
          while (1) switch (_context10.prev = _context10.next) {
            case 0:
              blob = new Blob(this.mediaManipulations.audioChunks, {
                type: 'audio/mp4'
              });
              formData = new FormData();
              formData.append('audio', blob, 'recorded-audio.mp4');
              _context10.prev = 3;
              _context10.next = 6;
              return fetch("".concat("MISSING_ENV_VAR".DB_HOST, "/upload-audio"), {
                method: 'POST',
                body: formData
              });
            case 6:
              response = _context10.sent;
              if (response.ok) {
                console.log('File uploaded successfully on the server.');
              } else {
                console.error('Error uploading file on the server:', response.statusText);
              }
              _context10.next = 13;
              break;
            case 10:
              _context10.prev = 10;
              _context10.t0 = _context10["catch"](3);
              console.error('Error uploading file on the server:', _context10.t0);
            case 13:
            case "end":
              return _context10.stop();
          }
        }, _callee10, this, [[3, 10]]);
      }));
      function sendAudioToServer() {
        return _sendAudioToServer.apply(this, arguments);
      }
      return sendAudioToServer;
    }()
  }, {
    key: "releaseResources",
    value: function releaseResources() {
      //if (this.mediaManipulations.stream) {
      //  this.mediaManipulations.stream.getTracks().forEach(track => track.stop())
      //}

      this.mediaManipulations = {
        stream: null,
        streamVideo: null,
        streamAudio: null,
        mediaRecorderVideo: null,
        mediaRecorderAudio: null,
        mediaChunks: [],
        audioChunks: []
      };
    }
  }]);
  return GoogleMeetMediaService;
}()) || _class;

/***/ }),

/***/ "./src/modules/googleMeetModule/services/secondaryServices/googleMeetUtilsService.ts":
/*!*******************************************************************************************!*\
  !*** ./src/modules/googleMeetModule/services/secondaryServices/googleMeetUtilsService.ts ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   GoogleMeetUtilsService: () => (/* binding */ GoogleMeetUtilsService)
/* harmony export */ });
/* harmony import */ var _core_decorators_ServiceDecorator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../core/decorators/ServiceDecorator */ "./src/core/decorators/ServiceDecorator.ts");
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
var _class;
function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, defineProperty = Object.defineProperty || function (obj, key, desc) { obj[key] = desc.value; }, $Symbol = "function" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || "@@iterator", asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator", toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, ""); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return defineProperty(generator, "_invoke", { value: makeInvokeMethod(innerFn, self, context) }), generator; } function tryCatch(fn, obj, arg) { try { return { type: "normal", arg: fn.call(obj, arg) }; } catch (err) { return { type: "throw", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { ["next", "throw", "return"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if ("throw" !== record.type) { var result = record.arg, value = result.value; return value && "object" == _typeof(value) && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke("next", value, resolve, reject); }, function (err) { invoke("throw", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke("throw", error, resolve, reject); }); } reject(record.arg); } var previousPromise; defineProperty(this, "_invoke", { value: function value(method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(innerFn, self, context) { var state = "suspendedStart"; return function (method, arg) { if ("executing" === state) throw new Error("Generator is already running"); if ("completed" === state) { if ("throw" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) { if ("suspendedStart" === state) throw state = "completed", context.arg; context.dispatchException(context.arg); } else "return" === context.method && context.abrupt("return", context.arg); state = "executing"; var record = tryCatch(innerFn, self, context); if ("normal" === record.type) { if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg); } }; } function maybeInvokeDelegate(delegate, context) { var methodName = context.method, method = delegate.iterator[methodName]; if (undefined === method) return context.delegate = null, "throw" === methodName && delegate.iterator["return"] && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method) || "return" !== methodName && (context.method = "throw", context.arg = new TypeError("The iterator does not provide a '" + methodName + "' method")), ContinueSentinel; var record = tryCatch(method, delegate.iterator, context.arg); if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = "normal", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: "root" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if ("function" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, defineProperty(Gp, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), defineProperty(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) { var ctor = "function" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, "toString", function () { return "[object Generator]"; }), exports.keys = function (val) { var object = Object(val), keys = []; for (var key in object) keys.push(key); return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if ("throw" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if ("root" === entry.tryLoc) return handle("end"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, "catchLoc"), hasFinally = hasOwn.call(entry, "finallyLoc"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error("try statement without catch or finally"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if ("throw" === record.type) throw record.arg; return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, "catch": function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if ("throw" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error("illegal catch attempt"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, "next" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }
function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }

var GoogleMeetUtilsService = (0,_core_decorators_ServiceDecorator__WEBPACK_IMPORTED_MODULE_0__.ServiceDecorator)(_class = /*#__PURE__*/_createClass(function GoogleMeetUtilsService() {
  var _this = this;
  _classCallCheck(this, GoogleMeetUtilsService);
  _defineProperty(this, "id", Math.random() * 10);
  _defineProperty(this, "convertTimeWithZero", function (time) {
    return "".concat(time.getHours().toString().padStart(2, '0'), ":").concat(time.getMinutes().toString().padStart(2, '0'));
  });
  _defineProperty(this, "leadToGeneral", function (name) {
    return name.replace(/(\n.*|\([^)]*\)|^\s+)/g, '');
  });
  _defineProperty(this, "leadsNotLeads", function (list) {
    var leads = [];
    var notLeads = [];
    for (var i = 0; i < list.length; i++) {
      list[i].participantRole === 'lead' ? leads.push(list[i].participantName) : notLeads.push(list[i].participantName);
    }
    return {
      leads: leads,
      notLeads: notLeads
    };
  });
  _defineProperty(this, "myRole", function (exitConfigList) {
    if (!exitConfigList) return console.warn('Don\'t save in exitConfigList !');
    var participants = document.querySelectorAll('.dkjMxf');
    var me = participants[participants.length - 1];
    var myName = me.querySelector('.XEazBc span div').outerText;
    var isGuest = exitConfigList.filter(function (p) {
      return p.participantName === myName;
    });
    return isGuest.length === 0 ? 'participant' : isGuest[0].participantRole;
  });
  _defineProperty(this, "clickAndWait", /*#__PURE__*/function () {
    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(element, delay) {
      return _regeneratorRuntime().wrap(function _callee$(_context) {
        while (1) switch (_context.prev = _context.next) {
          case 0:
            element.click();
            _context.next = 3;
            return new Promise(function (resolve) {
              return setTimeout(resolve, delay);
            });
          case 3:
          case "end":
            return _context.stop();
        }
      }, _callee);
    }));
    return function (_x, _x2) {
      return _ref.apply(this, arguments);
    };
  }());
  _defineProperty(this, "delay", function (executeFn, delay) {
    return setTimeout(function () {
      executeFn();
    }, delay);
  });
  _defineProperty(this, "onSubtitles", /*#__PURE__*/function () {
    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(settingsMenu) {
      var settingsMenuButton, settingsWindow, subtitlesOptions, subtitlesOption, checkBox, close;
      return _regeneratorRuntime().wrap(function _callee2$(_context2) {
        while (1) switch (_context2.prev = _context2.next) {
          case 0:
            settingsMenuButton = settingsMenu.querySelector('button');
            _context2.next = 3;
            return _this.clickAndWait(settingsMenuButton, 0);
          case 3:
            settingsWindow = document.querySelector('[jsname="dq27Te"]');
            _context2.next = 6;
            return _this.clickAndWait(settingsWindow, 2000);
          case 6:
            subtitlesOptions = document.querySelectorAll('[jsname="IDf7eb"]');
            subtitlesOption = subtitlesOptions[subtitlesOptions.length - 2].querySelector('span button');
            _context2.next = 10;
            return _this.clickAndWait(subtitlesOption, 200);
          case 10:
            checkBox = document.querySelector('[jsname="BfMHN"]');
            _context2.next = 13;
            return _this.clickAndWait(checkBox, 0);
          case 13:
            close = document.querySelector('.VfPpkd-Bz112c-LgbsSe.yHy1rc.eT1oJ.mN1ivc.VfPpkd-zMU9ub');
            _context2.next = 16;
            return _this.clickAndWait(close, 0);
          case 16:
          case "end":
            return _context2.stop();
        }
      }, _callee2);
    }));
    return function (_x3) {
      return _ref2.apply(this, arguments);
    };
  }());
  _defineProperty(this, "handleManyClick", function (element, clickQty, func) {
    var throttle = false;
    element.addEventListener('click', function (e) {
      if (!throttle && e.detail === clickQty) {
        throttle = true;
        func();
        setTimeout(function () {
          throttle = false;
          element.removeEventListener('click', this);
        }, 100);
      }
    });
    return throttle;
  });
  _defineProperty(this, "stylesHandle", function (styles) {
    return Object.entries(styles).reduce(function (string, style) {
      return string + "".concat(style[0], ": ").concat(style[1], "; ");
    }, '');
  });
})) || _class;

/***/ }),

/***/ "./src/modules/index.ts":
/*!******************************!*\
  !*** ./src/modules/index.ts ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   modules: () => (/* binding */ modules)
/* harmony export */ });
/* harmony import */ var _googleMeetModule_googleMeetModule__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./googleMeetModule/googleMeetModule */ "./src/modules/googleMeetModule/googleMeetModule.ts");


// Add new modules here
var modules = [_googleMeetModule_googleMeetModule__WEBPACK_IMPORTED_MODULE_0__.GoogleMeetModule];

/***/ }),

/***/ "./src/modules/intermediaryServices/intermediaryService.ts":
/*!*****************************************************************!*\
  !*** ./src/modules/intermediaryServices/intermediaryService.ts ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _services_rulesIntermediaryService__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./services/rulesIntermediaryService */ "./src/modules/intermediaryServices/services/rulesIntermediaryService.ts");
/* harmony import */ var _services_fetchFilesService__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./services/fetchFilesService */ "./src/modules/intermediaryServices/services/fetchFilesService.ts");
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }


var IntermediaryService = /*#__PURE__*/_createClass(function IntermediaryService() {
  var rulesIntermediaryService = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new _services_rulesIntermediaryService__WEBPACK_IMPORTED_MODULE_0__.RulesIntermediaryService();
  var fetchFilesService = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new _services_fetchFilesService__WEBPACK_IMPORTED_MODULE_1__.FetchFilesService();
  _classCallCheck(this, IntermediaryService);
  this.rulesIntermediaryService = rulesIntermediaryService;
  this.fetchFilesService = fetchFilesService;
  Object.freeze(this.rulesIntermediaryService);
  Object.freeze(this.fetchFilesService);
});
var GeneralIntermediary = new IntermediaryService();
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (GeneralIntermediary);

/***/ }),

/***/ "./src/modules/intermediaryServices/services/fetchFilesService.ts":
/*!************************************************************************!*\
  !*** ./src/modules/intermediaryServices/services/fetchFilesService.ts ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   FetchFilesService: () => (/* binding */ FetchFilesService)
/* harmony export */ });
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, defineProperty = Object.defineProperty || function (obj, key, desc) { obj[key] = desc.value; }, $Symbol = "function" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || "@@iterator", asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator", toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, ""); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return defineProperty(generator, "_invoke", { value: makeInvokeMethod(innerFn, self, context) }), generator; } function tryCatch(fn, obj, arg) { try { return { type: "normal", arg: fn.call(obj, arg) }; } catch (err) { return { type: "throw", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { ["next", "throw", "return"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if ("throw" !== record.type) { var result = record.arg, value = result.value; return value && "object" == _typeof(value) && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke("next", value, resolve, reject); }, function (err) { invoke("throw", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke("throw", error, resolve, reject); }); } reject(record.arg); } var previousPromise; defineProperty(this, "_invoke", { value: function value(method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(innerFn, self, context) { var state = "suspendedStart"; return function (method, arg) { if ("executing" === state) throw new Error("Generator is already running"); if ("completed" === state) { if ("throw" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) { if ("suspendedStart" === state) throw state = "completed", context.arg; context.dispatchException(context.arg); } else "return" === context.method && context.abrupt("return", context.arg); state = "executing"; var record = tryCatch(innerFn, self, context); if ("normal" === record.type) { if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg); } }; } function maybeInvokeDelegate(delegate, context) { var methodName = context.method, method = delegate.iterator[methodName]; if (undefined === method) return context.delegate = null, "throw" === methodName && delegate.iterator["return"] && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method) || "return" !== methodName && (context.method = "throw", context.arg = new TypeError("The iterator does not provide a '" + methodName + "' method")), ContinueSentinel; var record = tryCatch(method, delegate.iterator, context.arg); if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = "normal", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: "root" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if ("function" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, defineProperty(Gp, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), defineProperty(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) { var ctor = "function" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, "toString", function () { return "[object Generator]"; }), exports.keys = function (val) { var object = Object(val), keys = []; for (var key in object) keys.push(key); return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if ("throw" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if ("root" === entry.tryLoc) return handle("end"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, "catchLoc"), hasFinally = hasOwn.call(entry, "finallyLoc"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error("try statement without catch or finally"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if ("throw" === record.type) throw record.arg; return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, "catch": function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if ("throw" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error("illegal catch attempt"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, "next" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }
function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
var FetchFilesService = /*#__PURE__*/function () {
  function FetchFilesService() {
    _classCallCheck(this, FetchFilesService);
    _defineProperty(this, "files", {
      microAudio: {
        name: null,
        file: null
      }
    });
  }

  // this method and derivative method need to delete because process of playing audio into user microphone is realized in desktop app
  _createClass(FetchFilesService, [{
    key: "getMicroAudio",
    value: function () {
      var _getMicroAudio = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(name) {
        return _regeneratorRuntime().wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              if (!(this.files.microAudio.name !== name)) {
                _context.next = 3;
                break;
              }
              _context.next = 3;
              return this.fetchMicroAudio(name);
            case 3:
              return _context.abrupt("return", {
                microAudio: this.files.microAudio.file
              });
            case 4:
            case "end":
              return _context.stop();
          }
        }, _callee, this);
      }));
      function getMicroAudio(_x) {
        return _getMicroAudio.apply(this, arguments);
      }
      return getMicroAudio;
    }()
  }, {
    key: "fetchMicroAudio",
    value: function () {
      var _fetchMicroAudio = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(name) {
        var response;
        return _regeneratorRuntime().wrap(function _callee2$(_context2) {
          while (1) switch (_context2.prev = _context2.next) {
            case 0:
              _context2.prev = 0;
              _context2.next = 3;
              return fetch("".concat("MISSING_ENV_VAR".DB_HOST, "/get-micro-audio/").concat(name));
            case 3:
              response = _context2.sent;
              if (!response.ok) {
                _context2.next = 11;
                break;
              }
              _context2.next = 7;
              return response.blob();
            case 7:
              this.files.microAudio.file = _context2.sent;
              this.files.microAudio.name = name;
              _context2.next = 12;
              break;
            case 11:
              console.error('Failed to download file');
            case 12:
              _context2.next = 17;
              break;
            case 14:
              _context2.prev = 14;
              _context2.t0 = _context2["catch"](0);
              console.error(_context2.t0);
            case 17:
            case "end":
              return _context2.stop();
          }
        }, _callee2, this, [[0, 14]]);
      }));
      function fetchMicroAudio(_x2) {
        return _fetchMicroAudio.apply(this, arguments);
      }
      return fetchMicroAudio;
    }()
  }]);
  return FetchFilesService;
}();

/***/ }),

/***/ "./src/modules/intermediaryServices/services/rulesIntermediaryService.ts":
/*!*******************************************************************************!*\
  !*** ./src/modules/intermediaryServices/services/rulesIntermediaryService.ts ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   RulesIntermediaryService: () => (/* binding */ RulesIntermediaryService)
/* harmony export */ });
/* harmony import */ var _config_json__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../config.json */ "./config.json");
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, defineProperty = Object.defineProperty || function (obj, key, desc) { obj[key] = desc.value; }, $Symbol = "function" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || "@@iterator", asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator", toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, ""); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return defineProperty(generator, "_invoke", { value: makeInvokeMethod(innerFn, self, context) }), generator; } function tryCatch(fn, obj, arg) { try { return { type: "normal", arg: fn.call(obj, arg) }; } catch (err) { return { type: "throw", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { ["next", "throw", "return"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if ("throw" !== record.type) { var result = record.arg, value = result.value; return value && "object" == _typeof(value) && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke("next", value, resolve, reject); }, function (err) { invoke("throw", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke("throw", error, resolve, reject); }); } reject(record.arg); } var previousPromise; defineProperty(this, "_invoke", { value: function value(method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(innerFn, self, context) { var state = "suspendedStart"; return function (method, arg) { if ("executing" === state) throw new Error("Generator is already running"); if ("completed" === state) { if ("throw" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) { if ("suspendedStart" === state) throw state = "completed", context.arg; context.dispatchException(context.arg); } else "return" === context.method && context.abrupt("return", context.arg); state = "executing"; var record = tryCatch(innerFn, self, context); if ("normal" === record.type) { if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg); } }; } function maybeInvokeDelegate(delegate, context) { var methodName = context.method, method = delegate.iterator[methodName]; if (undefined === method) return context.delegate = null, "throw" === methodName && delegate.iterator["return"] && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method) || "return" !== methodName && (context.method = "throw", context.arg = new TypeError("The iterator does not provide a '" + methodName + "' method")), ContinueSentinel; var record = tryCatch(method, delegate.iterator, context.arg); if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = "normal", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: "root" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if ("function" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, defineProperty(Gp, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), defineProperty(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) { var ctor = "function" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, "toString", function () { return "[object Generator]"; }), exports.keys = function (val) { var object = Object(val), keys = []; for (var key in object) keys.push(key); return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if ("throw" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if ("root" === entry.tryLoc) return handle("end"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, "catchLoc"), hasFinally = hasOwn.call(entry, "finallyLoc"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error("try statement without catch or finally"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if ("throw" === record.type) throw record.arg; return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, "catch": function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if ("throw" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error("illegal catch attempt"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, "next" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }
function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }

var RulesIntermediaryService = /*#__PURE__*/function () {
  function RulesIntermediaryService() {
    _classCallCheck(this, RulesIntermediaryService);
  }
  _createClass(RulesIntermediaryService, [{
    key: "getRules",
    value: function () {
      var _getRules = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
        return _regeneratorRuntime().wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              _context.prev = 0;
              _context.next = 3;
              return this.fetchServerRules();
            case 3:
              _context.t0 = _context.sent;
              if (_context.t0) {
                _context.next = 6;
                break;
              }
              _context.t0 = {};
            case 6:
              return _context.abrupt("return", _context.t0);
            case 9:
              _context.prev = 9;
              _context.t1 = _context["catch"](0);
              return _context.abrupt("return", _config_json__WEBPACK_IMPORTED_MODULE_0__);
            case 12:
            case "end":
              return _context.stop();
          }
        }, _callee, this, [[0, 9]]);
      }));
      function getRules() {
        return _getRules.apply(this, arguments);
      }
      return getRules;
    }()
  }, {
    key: "fetchServerRules",
    value: function () {
      var _fetchServerRules = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {
        var response, data;
        return _regeneratorRuntime().wrap(function _callee2$(_context2) {
          while (1) switch (_context2.prev = _context2.next) {
            case 0:
              _context2.prev = 0;
              _context2.next = 3;
              return fetch("".concat("MISSING_ENV_VAR".DB_HOST, "/rules"));
            case 3:
              response = _context2.sent;
              if (response.ok) {
                _context2.next = 6;
                break;
              }
              throw new Error('Request failed with status: ' + response.status);
            case 6:
              _context2.next = 8;
              return response.json();
            case 8:
              data = _context2.sent;
              return _context2.abrupt("return", JSON.parse(data));
            case 12:
              _context2.prev = 12;
              _context2.t0 = _context2["catch"](0);
              console.error('Error fetching data:', _context2.t0);
            case 15:
            case "end":
              return _context2.stop();
          }
        }, _callee2, null, [[0, 12]]);
      }));
      function fetchServerRules() {
        return _fetchServerRules.apply(this, arguments);
      }
      return fetchServerRules;
    }()
  }]);
  return RulesIntermediaryService;
}();

/***/ }),

/***/ "./config.json":
/*!*********************!*\
  !*** ./config.json ***!
  \*********************/
/***/ ((module) => {

module.exports = JSON.parse('{"meetService":{"participants":[{"participantName":"Someone 0","participantRole":"lead","assignedTo":["Daily meet up","Refinement call"]},{"participantName":"Someone 1","participantRole":"participant","assignedTo":["Daily meet up","Refinement call"]},{"participantName":"Someone 2","participantRole":"participant","assignedTo":["Daily meet up","Refinement call"]},{"participantName":"Someone 3","participantRole":"participant","assignedTo":["Daily meet up","Refinement call"]},{"participantName":"Someone 4","participantRole":"participant","assignedTo":["Daily meet up","Refinement call"]}],"googlemeetRules":{"10:00":{"title":"Refinement call","rules":{"autoJoinParticipantsQuantity":0,"leaveTogetherWithMyGuys":{"isTurnOn":false,"guys":["someone 1","someone 2"],"leaveWhen":"all"},"fullscreenOnJoin":false,"percentageToLeave":0,"joinWithCameraOff":false,"keepTabActive":false,"showSubtitlesWhenZoomed":true}},"12:15":{"title":"Daily meet up","rules":{"autoJoinParticipantsQuantity":1,"leaveTogetherWithMyGuys":{"isTurnOn":true,"guys":["someone 1","someone 2"],"leaveWhen":"one"},"fullscreenOnJoin":false,"percentageToLeave":0.73,"joinWithCameraOff":true,"keepTabActive":false,"showSubtitles":true}}}},"disabledFeatures":{"meetService":{"disableRecordFeature":true}}}');

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// This entry need to be wrapped in an IIFE because it need to be isolated against other modules in the chunk.
(() => {
/*!***********************!*\
  !*** ./src/runner.ts ***!
  \***********************/
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _modules__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./modules */ "./src/modules/index.ts");
/* harmony import */ var _core_decorators_ExtensionConfig__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./core/decorators/ExtensionConfig */ "./src/core/decorators/ExtensionConfig.ts");
/* harmony import */ var _core_extensionCoreModule__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./core/extensionCoreModule */ "./src/core/extensionCoreModule.ts");
/* harmony import */ var _core_observer_ModuleTurner__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./core/observer/ModuleTurner */ "./src/core/observer/ModuleTurner.ts");
/* harmony import */ var _core_dependencyContainer_dependencyContainer__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./core/dependencyContainer/dependencyContainer */ "./src/core/dependencyContainer/dependencyContainer.ts");
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
var _dec, _class, _class2;
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }





var config = {
  functionalities: _modules__WEBPACK_IMPORTED_MODULE_0__.modules
};
var Config = (_dec = (0,_core_decorators_ExtensionConfig__WEBPACK_IMPORTED_MODULE_1__.ExtensionConfig)(config), _dec(_class = (_class2 = /*#__PURE__*/function () {
  function Config() {
    _classCallCheck(this, Config);
  }
  _createClass(Config, null, [{
    key: "getConfig",
    value: function getConfig() {
      return this.config;
    }
  }, {
    key: "setConfig",
    value: function setConfig(config) {
      this.config = config;
    }
  }]);
  return Config;
}(), _defineProperty(_class2, "config", void 0), _class2)) || _class);
var extension = new _core_extensionCoreModule__WEBPACK_IMPORTED_MODULE_2__.ExtensionCoreModule(Config.getConfig());
var turner = _core_dependencyContainer_dependencyContainer__WEBPACK_IMPORTED_MODULE_4__["default"].getService(_core_observer_ModuleTurner__WEBPACK_IMPORTED_MODULE_3__.ModuleTurner.name);
turner.initialModuleTurner(extension, config, Config);
extension.setup();
})();

/******/ })()
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,